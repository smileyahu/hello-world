
LCD_Atle_Torstein.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  0000236a  000023fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000236a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800228  00800228  00002426  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b51  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f9  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bc  00000000  00000000  000052d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00006594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a70  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eac  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000085bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_29>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e6       	ldi	r30, 0x6A	; 106
      fc:	f3 e2       	ldi	r31, 0x23	; 35
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 32       	cpi	r26, 0x28	; 40
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e2       	ldi	r26, 0x28	; 40
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 38       	cpi	r26, 0x8A	; 138
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 15 03 	call	0x62a	; 0x62a <main>
     122:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_delayFourCycles>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	1f 92       	push	r1
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	89 2b       	or	r24, r25
     140:	11 f4       	brne	.+4      	; 0x146 <_delayFourCycles+0x1c>
     142:	00 c0       	rjmp	.+0      	; 0x144 <_delayFourCycles+0x1a>
     144:	06 c0       	rjmp	.+12     	; 0x152 <_delayFourCycles+0x28>
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	9a 81       	ldd	r25, Y+2	; 0x02
     14a:	01 97       	sbiw	r24, 0x01	; 1
     14c:	f1 f7       	brne	.-4      	; 0x14a <_delayFourCycles+0x20>
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	00 00       	nop
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <toggle_e>:
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	62 e0       	ldi	r22, 0x02	; 2
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pcf8574_setoutputpinhigh>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <toggle_e+0x12>
     170:	62 e0       	ldi	r22, 0x02	; 2
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <pcf8574_setoutputpinlow>
     178:	00 00       	nop
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <lcd_write>:
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	1f 92       	push	r1
     186:	1f 92       	push	r1
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	6a 83       	std	Y+2, r22	; 0x02
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <lcd_write+0x22>
     196:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     19a:	81 60       	ori	r24, 0x01	; 1
     19c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <lcd_write+0x2c>
     1a2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1a6:	8e 7f       	andi	r24, 0xFE	; 254
     1a8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1ac:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1b0:	8d 7f       	andi	r24, 0xFD	; 253
     1b2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1b6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1ba:	68 2f       	mov	r22, r24
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     1c2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1c6:	8f 77       	andi	r24, 0x7F	; 127
     1c8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1cc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1d0:	8f 7b       	andi	r24, 0xBF	; 191
     1d2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1d6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1da:	8f 7d       	andi	r24, 0xDF	; 223
     1dc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1e0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1e4:	8f 7e       	andi	r24, 0xEF	; 239
     1e6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	88 23       	and	r24, r24
     1ee:	2c f4       	brge	.+10     	; 0x1fa <lcd_write+0x7a>
     1f0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     1f4:	80 68       	ori	r24, 0x80	; 128
     1f6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	80 74       	andi	r24, 0x40	; 64
     202:	99 27       	eor	r25, r25
     204:	89 2b       	or	r24, r25
     206:	29 f0       	breq	.+10     	; 0x212 <lcd_write+0x92>
     208:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     20c:	80 64       	ori	r24, 0x40	; 64
     20e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	80 72       	andi	r24, 0x20	; 32
     21a:	99 27       	eor	r25, r25
     21c:	89 2b       	or	r24, r25
     21e:	29 f0       	breq	.+10     	; 0x22a <lcd_write+0xaa>
     220:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     224:	80 62       	ori	r24, 0x20	; 32
     226:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	80 71       	andi	r24, 0x10	; 16
     232:	99 27       	eor	r25, r25
     234:	89 2b       	or	r24, r25
     236:	29 f0       	breq	.+10     	; 0x242 <lcd_write+0xc2>
     238:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     23c:	80 61       	ori	r24, 0x10	; 16
     23e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     242:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     246:	68 2f       	mov	r22, r24
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     24e:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
     252:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     256:	8f 77       	andi	r24, 0x7F	; 127
     258:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     25c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     260:	8f 7b       	andi	r24, 0xBF	; 191
     262:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     266:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     26a:	8f 7d       	andi	r24, 0xDF	; 223
     26c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     270:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     274:	8f 7e       	andi	r24, 0xEF	; 239
     276:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	88 70       	andi	r24, 0x08	; 8
     282:	99 27       	eor	r25, r25
     284:	89 2b       	or	r24, r25
     286:	29 f0       	breq	.+10     	; 0x292 <lcd_write+0x112>
     288:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 2f       	mov	r24, r24
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	84 70       	andi	r24, 0x04	; 4
     29a:	99 27       	eor	r25, r25
     29c:	89 2b       	or	r24, r25
     29e:	29 f0       	breq	.+10     	; 0x2aa <lcd_write+0x12a>
     2a0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	82 70       	andi	r24, 0x02	; 2
     2b2:	99 27       	eor	r25, r25
     2b4:	89 2b       	or	r24, r25
     2b6:	29 f0       	breq	.+10     	; 0x2c2 <lcd_write+0x142>
     2b8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2bc:	80 62       	ori	r24, 0x20	; 32
     2be:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	81 70       	andi	r24, 0x01	; 1
     2ca:	99 27       	eor	r25, r25
     2cc:	89 2b       	or	r24, r25
     2ce:	29 f0       	breq	.+10     	; 0x2da <lcd_write+0x15a>
     2d0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2d4:	80 61       	ori	r24, 0x10	; 16
     2d6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     2da:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2de:	68 2f       	mov	r22, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     2e6:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
     2ea:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2ee:	80 61       	ori	r24, 0x10	; 16
     2f0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     2f4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     2f8:	80 62       	ori	r24, 0x20	; 32
     2fa:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     2fe:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     302:	80 64       	ori	r24, 0x40	; 64
     304:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     308:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     30c:	80 68       	ori	r24, 0x80	; 128
     30e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     312:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     316:	68 2f       	mov	r22, r24
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     31e:	00 00       	nop
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <lcd_read>:
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	1f 92       	push	r1
     330:	1f 92       	push	r1
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	88 23       	and	r24, r24
     33c:	31 f0       	breq	.+12     	; 0x34a <lcd_read+0x20>
     33e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     342:	81 60       	ori	r24, 0x01	; 1
     344:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     348:	05 c0       	rjmp	.+10     	; 0x354 <lcd_read+0x2a>
     34a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     34e:	8e 7f       	andi	r24, 0xFE	; 254
     350:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     354:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     358:	82 60       	ori	r24, 0x02	; 2
     35a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     35e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     362:	68 2f       	mov	r22, r24
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     36a:	62 e0       	ldi	r22, 0x02	; 2
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pcf8574_setoutputpinhigh>
     372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_read+0x4a>
     374:	64 e0       	ldi	r22, 0x04	; 4
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	0e 94 2a 0b 	call	0x1654	; 0x1654 <pcf8574_getoutputpin>
     37c:	82 95       	swap	r24
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	89 83       	std	Y+1, r24	; 0x01
     382:	62 e0       	ldi	r22, 0x02	; 2
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <pcf8574_setoutputpinlow>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_read+0x62>
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pcf8574_setoutputpinhigh>
     394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_read+0x6c>
     396:	64 e0       	ldi	r22, 0x04	; 4
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <pcf8574_getoutputpin>
     39e:	08 2e       	mov	r0, r24
     3a0:	00 0c       	add	r0, r0
     3a2:	99 0b       	sbc	r25, r25
     3a4:	8f 70       	andi	r24, 0x0F	; 15
     3a6:	99 27       	eor	r25, r25
     3a8:	98 2f       	mov	r25, r24
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	89 2b       	or	r24, r25
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <pcf8574_setoutputpinlow>
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <lcd_waitbusy>:
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_read>
     3d4:	18 2f       	mov	r17, r24
     3d6:	81 2f       	mov	r24, r17
     3d8:	88 23       	and	r24, r24
     3da:	cc f3       	brlt	.-14     	; 0x3ce <lcd_waitbusy+0xa>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_read>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	08 95       	ret

000003f2 <lcd_newline>:
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	80 34       	cpi	r24, 0x40	; 64
     404:	10 f4       	brcc	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	10 e4       	ldi	r17, 0x40	; 64
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	81 0f       	add	r24, r17
     410:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
     414:	00 00       	nop
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	08 95       	ret

00000420 <lcd_command>:
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_waitbusy>
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
     438:	00 00       	nop
     43a:	0f 90       	pop	r0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <lcd_gotoxy>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	1f 92       	push	r1
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	6a 83       	std	Y+2, r22	; 0x02
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	88 23       	and	r24, r24
     456:	29 f4       	brne	.+10     	; 0x462 <lcd_gotoxy+0x20>
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	80 58       	subi	r24, 0x80	; 128
     45c:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
     460:	04 c0       	rjmp	.+8      	; 0x46a <lcd_gotoxy+0x28>
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	80 54       	subi	r24, 0x40	; 64
     466:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
     46a:	00 00       	nop
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <lcd_clrscr>:
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
     484:	00 00       	nop
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <lcd_led>:
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	1f 92       	push	r1
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 23       	and	r24, r24
     49c:	31 f0       	breq	.+12     	; 0x4aa <lcd_led+0x1e>
     49e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     4a2:	87 7f       	andi	r24, 0xF7	; 247
     4a4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <lcd_led+0x28>
     4aa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     4ae:	88 60       	ori	r24, 0x08	; 8
     4b0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
     4b4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     4b8:	68 2f       	mov	r22, r24
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
     4c0:	00 00       	nop
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_home>:
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
     4d8:	00 00       	nop
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <lcd_putc>:
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	8a 83       	std	Y+2, r24	; 0x02
     4ee:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_waitbusy>
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	8a 30       	cpi	r24, 0x0A	; 10
     4f8:	21 f4       	brne	.+8      	; 0x502 <lcd_putc+0x22>
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_newline>
     500:	15 c0       	rjmp	.+42     	; 0x52c <lcd_putc+0x4c>
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	80 31       	cpi	r24, 0x10	; 16
     506:	29 f4       	brne	.+10     	; 0x512 <lcd_putc+0x32>
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	80 ec       	ldi	r24, 0xC0	; 192
     50c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
     510:	07 c0       	rjmp	.+14     	; 0x520 <lcd_putc+0x40>
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	80 35       	cpi	r24, 0x50	; 80
     516:	21 f4       	brne	.+8      	; 0x520 <lcd_putc+0x40>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
     520:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_waitbusy>
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write>
     52c:	00 00       	nop
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <lcd_puts>:
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	1f 92       	push	r1
     540:	1f 92       	push	r1
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	03 c0       	rjmp	.+6      	; 0x552 <lcd_puts+0x1a>
     54c:	81 2f       	mov	r24, r17
     54e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <lcd_putc>
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	9c 01       	movw	r18, r24
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	3a 83       	std	Y+2, r19	; 0x02
     55e:	29 83       	std	Y+1, r18	; 0x01
     560:	fc 01       	movw	r30, r24
     562:	10 81       	ld	r17, Z
     564:	11 23       	and	r17, r17
     566:	91 f7       	brne	.-28     	; 0x54c <lcd_puts+0x14>
     568:	00 00       	nop
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	89 83       	std	Y+1, r24	; 0x01
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
     582:	0e 94 15 0a 	call	0x142a	; 0x142a <pcf8574_init>
	#endif

	dataport = 0;
     586:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     58a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     58e:	68 2f       	mov	r22, r24
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>

    delay(16000);        /* wait 16ms or more after power-on       */
     596:	80 ea       	ldi	r24, 0xA0	; 160
     598:	9f e0       	ldi	r25, 0x0F	; 15
     59a:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     59e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     5a2:	80 62       	ori	r24, 0x20	; 32
     5a4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     5a8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     5ac:	80 61       	ori	r24, 0x10	; 16
     5ae:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     5b2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     5b6:	68 2f       	mov	r22, r24
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>

    lcd_e_toggle();
     5be:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     5c2:	80 ee       	ldi	r24, 0xE0	; 224
     5c4:	94 e0       	ldi	r25, 0x04	; 4
     5c6:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
     5ca:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     5ce:	80 e1       	ldi	r24, 0x10	; 16
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     5d6:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
     5e2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     5e6:	8f 7e       	andi	r24, 0xEF	; 239
     5e8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     5ec:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
     5f0:	68 2f       	mov	r22, r24
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pcf8574_setoutput>
    lcd_e_toggle();
     5f8:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
    delay(64);           /* some displays need this additional delay */
     5fc:	80 e1       	ldi	r24, 0x10	; 16
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 95 00 	call	0x12a	; 0x12a <_delayFourCycles>
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     604:	88 e2       	ldi	r24, 0x28	; 40
     606:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
    lcd_clrscr();                           /* display clear                */
     610:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     614:	86 e0       	ldi	r24, 0x06	; 6
     616:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	0e 94 10 02 	call	0x420	; 0x420 <lcd_command>

}/* lcd_init */
     620:	00 00       	nop
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <main>:
char lcd_int_double_to_string;
//#define UART_BAUD_RATE 2400
//#include "uart.h"

int main(void)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	a9 97       	sbiw	r28, 0x29	; 41
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
	///////////////////
	//initializations//
	///////////////////

	//Initialization functions
	InitialiseGeneral();
     63e:	0e 94 76 06 	call	0xcec	; 0xcec <InitialiseGeneral>
	InitialiseTimer1();
     642:	0e 94 37 07 	call	0xe6e	; 0xe6e <InitialiseTimer1>
	InitialiseADC();
     646:	0e 94 63 07 	call	0xec6	; 0xec6 <InitialiseADC>
	InitialiseTimer3_FastPWM_Single();
     64a:	0e 94 91 07 	call	0xf22	; 0xf22 <InitialiseTimer3_FastPWM_Single>
	Initialise_HW_Interrupts();
     64e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Initialise_HW_Interrupts>

	//Initialize LCD
	lcd_init(LCD_DISP_ON_BLINK);
     652:	8d e0       	ldi	r24, 0x0D	; 13
     654:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_init>
	lcd_home();
     658:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_home>
	uint8_t led = 0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
	lcd_led(led); //set led
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_led>

	//Write text which doesn't change during operations
	lcd_gotoxy(0,0);//(0,1) =Starting at line 2 position 1.
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
	lcd_puts("L= ");
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
	lcd_gotoxy(0, 1);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
	lcd_puts("F= ");
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
	lcd_gotoxy(8, 0);
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
	lcd_puts("S= ");
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
	lcd_gotoxy(8, 1);
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
	lcd_puts("O= ");
     69c:	8c e0       	ldi	r24, 0x0C	; 12
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		
		////////////////////////
		//Set and Reset alarms//
		////////////////////////
		
		Button_value = PINL; 
     6a4:	89 e0       	ldi	r24, 0x09	; 9
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <Button_value>

		if (0xFF > Button_value)
     6b0:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Button_value>
     6b4:	8f 3f       	cpi	r24, 0xFF	; 255
     6b6:	11 f0       	breq	.+4      	; 0x6bc <main+0x92>
		{
			LED_Pattern &= 0x00; // Reset triggered
     6b8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <LED_Pattern>
			//LED_Pattern |=0xC0;
		//}
		
		//////////////////////////////////////////////////////////////////////////

		PORTA = LED_Pattern;
     6bc:	82 e2       	ldi	r24, 0x22	; 34
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <LED_Pattern>
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
		//for level and flow:
			//wanted value = Position/2.55
		//for output:
			//wanted value = (FlowOutput+300)/7

		LevelPosition_inPercent = LevelPosition/2.55;
     6c8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <LevelPosition>
     6cc:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <LevelPosition+0x1>
     6d0:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <LevelPosition+0x2>
     6d4:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <LevelPosition+0x3>
     6d8:	23 e3       	ldi	r18, 0x33	; 51
     6da:	33 e3       	ldi	r19, 0x33	; 51
     6dc:	43 e2       	ldi	r20, 0x23	; 35
     6de:	50 e4       	ldi	r21, 0x40	; 64
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	8c 83       	std	Y+4, r24	; 0x04
     6ee:	9d 83       	std	Y+5, r25	; 0x05
     6f0:	ae 83       	std	Y+6, r26	; 0x06
     6f2:	bf 83       	std	Y+7, r27	; 0x07
	    FlowPosition_inPercent = FlowPosition/2.55;
     6f4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <FlowPosition>
     6f8:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <FlowPosition+0x1>
     6fc:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <FlowPosition+0x2>
     700:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <FlowPosition+0x3>
     704:	23 e3       	ldi	r18, 0x33	; 51
     706:	33 e3       	ldi	r19, 0x33	; 51
     708:	43 e2       	ldi	r20, 0x23	; 35
     70a:	50 e4       	ldi	r21, 0x40	; 64
     70c:	bc 01       	movw	r22, r24
     70e:	cd 01       	movw	r24, r26
     710:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	88 87       	std	Y+8, r24	; 0x08
     71a:	99 87       	std	Y+9, r25	; 0x09
     71c:	aa 87       	std	Y+10, r26	; 0x0a
     71e:	bb 87       	std	Y+11, r27	; 0x0b
		FlowOutput_inPercent = (FlowOutput+300)/7;
     720:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <FlowOutput>
     724:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <FlowOutput+0x1>
     728:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <FlowOutput+0x2>
     72c:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <FlowOutput+0x3>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	46 e9       	ldi	r20, 0x96	; 150
     736:	53 e4       	ldi	r21, 0x43	; 67
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 8d 0c 	call	0x191a	; 0x191a <__addsf3>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 ee       	ldi	r20, 0xE0	; 224
     74a:	50 e4       	ldi	r21, 0x40	; 64
     74c:	bc 01       	movw	r22, r24
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	8c 87       	std	Y+12, r24	; 0x0c
     75a:	9d 87       	std	Y+13, r25	; 0x0d
     75c:	ae 87       	std	Y+14, r26	; 0x0e
     75e:	bf 87       	std	Y+15, r27	; 0x0f
		////////////////////////////////////////
		//Level

		//Code to split the double into two integers before it can be printed to the LCD
		//Each input is one double which needs to be split into two char arrays, because that it the data type the LCD library accepts.
		b = LevelPosition_inPercent;		
     760:	6c 81       	ldd	r22, Y+4	; 0x04
     762:	7d 81       	ldd	r23, Y+5	; 0x05
     764:	8e 81       	ldd	r24, Y+6	; 0x06
     766:	9f 81       	ldd	r25, Y+7	; 0x07
     768:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	99 8b       	std	Y+17, r25	; 0x11
     772:	88 8b       	std	Y+16, r24	; 0x10
		num1 = LevelPosition_inPercent * 100;
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	48 ec       	ldi	r20, 0xC8	; 200
     77a:	52 e4       	ldi	r21, 0x42	; 66
     77c:	6c 81       	ldd	r22, Y+4	; 0x04
     77e:	7d 81       	ldd	r23, Y+5	; 0x05
     780:	8e 81       	ldd	r24, Y+6	; 0x06
     782:	9f 81       	ldd	r25, Y+7	; 0x07
     784:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	8a 8b       	std	Y+18, r24	; 0x12
     78e:	9b 8b       	std	Y+19, r25	; 0x13
     790:	ac 8b       	std	Y+20, r26	; 0x14
     792:	bd 8b       	std	Y+21, r27	; 0x15
		c = num1;
     794:	6a 89       	ldd	r22, Y+18	; 0x12
     796:	7b 89       	ldd	r23, Y+19	; 0x13
     798:	8c 89       	ldd	r24, Y+20	; 0x14
     79a:	9d 89       	ldd	r25, Y+21	; 0x15
     79c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	9f 8b       	std	Y+23, r25	; 0x17
     7a6:	8e 8b       	std	Y+22, r24	; 0x16
		d = b * 100;
     7a8:	28 89       	ldd	r18, Y+16	; 0x10
     7aa:	39 89       	ldd	r19, Y+17	; 0x11
     7ac:	44 e6       	ldi	r20, 0x64	; 100
     7ae:	42 9f       	mul	r20, r18
     7b0:	c0 01       	movw	r24, r0
     7b2:	43 9f       	mul	r20, r19
     7b4:	90 0d       	add	r25, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	99 8f       	std	Y+25, r25	; 0x19
     7ba:	88 8f       	std	Y+24, r24	; 0x18
		e = c - d ;
     7bc:	2e 89       	ldd	r18, Y+22	; 0x16
     7be:	3f 89       	ldd	r19, Y+23	; 0x17
     7c0:	88 8d       	ldd	r24, Y+24	; 0x18
     7c2:	99 8d       	ldd	r25, Y+25	; 0x19
     7c4:	a9 01       	movw	r20, r18
     7c6:	48 1b       	sub	r20, r24
     7c8:	59 0b       	sbc	r21, r25
     7ca:	ca 01       	movw	r24, r20
     7cc:	9b 8f       	std	Y+27, r25	; 0x1b
     7ce:	8a 8f       	std	Y+26, r24	; 0x1a
		sprintf(charray, "%2.1hhi", b); //Put integer into char array
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	8f 93       	push	r24
     7d4:	88 89       	ldd	r24, Y+16	; 0x10
     7d6:	8f 93       	push	r24
     7d8:	80 e1       	ldi	r24, 0x10	; 16
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	89 2f       	mov	r24, r25
     7de:	8f 93       	push	r24
     7e0:	80 e1       	ldi	r24, 0x10	; 16
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	8f 93       	push	r24
     7e6:	ce 01       	movw	r24, r28
     7e8:	4c 96       	adiw	r24, 0x1c	; 28
     7ea:	29 2f       	mov	r18, r25
     7ec:	2f 93       	push	r18
     7ee:	8f 93       	push	r24
     7f0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
		sprintf(charray1, "%.1hhi", e);
     800:	8b 8d       	ldd	r24, Y+27	; 0x1b
     802:	8f 93       	push	r24
     804:	8a 8d       	ldd	r24, Y+26	; 0x1a
     806:	8f 93       	push	r24
     808:	88 e1       	ldi	r24, 0x18	; 24
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	89 2f       	mov	r24, r25
     80e:	8f 93       	push	r24
     810:	88 e1       	ldi	r24, 0x18	; 24
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	8f 93       	push	r24
     816:	ce 01       	movw	r24, r28
     818:	81 96       	adiw	r24, 0x21	; 33
     81a:	29 2f       	mov	r18, r25
     81c:	2f 93       	push	r18
     81e:	8f 93       	push	r24
     820:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0

		//Write level to LCD
		lcd_gotoxy(2, 0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray);
     838:	ce 01       	movw	r24, r28
     83a:	4c 96       	adiw	r24, 0x1c	; 28
     83c:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(4, 0);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(",");
     848:	8f e1       	ldi	r24, 0x1F	; 31
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(5, 0);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	85 e0       	ldi	r24, 0x05	; 5
     854:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray1);
     858:	ce 01       	movw	r24, r28
     85a:	81 96       	adiw	r24, 0x21	; 33
     85c:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(8, 0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>

		////////////////////////////////////////
		//Flow

		//Code to split the double into two integers before it can be printed to the LCD
		b = FlowPosition_inPercent;
     868:	68 85       	ldd	r22, Y+8	; 0x08
     86a:	79 85       	ldd	r23, Y+9	; 0x09
     86c:	8a 85       	ldd	r24, Y+10	; 0x0a
     86e:	9b 85       	ldd	r25, Y+11	; 0x0b
     870:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	99 8b       	std	Y+17, r25	; 0x11
     87a:	88 8b       	std	Y+16, r24	; 0x10
		num1 = FlowPosition_inPercent * 100;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	48 ec       	ldi	r20, 0xC8	; 200
     882:	52 e4       	ldi	r21, 0x42	; 66
     884:	68 85       	ldd	r22, Y+8	; 0x08
     886:	79 85       	ldd	r23, Y+9	; 0x09
     888:	8a 85       	ldd	r24, Y+10	; 0x0a
     88a:	9b 85       	ldd	r25, Y+11	; 0x0b
     88c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	8a 8b       	std	Y+18, r24	; 0x12
     896:	9b 8b       	std	Y+19, r25	; 0x13
     898:	ac 8b       	std	Y+20, r26	; 0x14
     89a:	bd 8b       	std	Y+21, r27	; 0x15
		c = num1;
     89c:	6a 89       	ldd	r22, Y+18	; 0x12
     89e:	7b 89       	ldd	r23, Y+19	; 0x13
     8a0:	8c 89       	ldd	r24, Y+20	; 0x14
     8a2:	9d 89       	ldd	r25, Y+21	; 0x15
     8a4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9f 8b       	std	Y+23, r25	; 0x17
     8ae:	8e 8b       	std	Y+22, r24	; 0x16
		d = b * 100;
     8b0:	28 89       	ldd	r18, Y+16	; 0x10
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	44 e6       	ldi	r20, 0x64	; 100
     8b6:	42 9f       	mul	r20, r18
     8b8:	c0 01       	movw	r24, r0
     8ba:	43 9f       	mul	r20, r19
     8bc:	90 0d       	add	r25, r0
     8be:	11 24       	eor	r1, r1
     8c0:	99 8f       	std	Y+25, r25	; 0x19
     8c2:	88 8f       	std	Y+24, r24	; 0x18
		e = c - d ;
     8c4:	2e 89       	ldd	r18, Y+22	; 0x16
     8c6:	3f 89       	ldd	r19, Y+23	; 0x17
     8c8:	88 8d       	ldd	r24, Y+24	; 0x18
     8ca:	99 8d       	ldd	r25, Y+25	; 0x19
     8cc:	f9 01       	movw	r30, r18
     8ce:	e8 1b       	sub	r30, r24
     8d0:	f9 0b       	sbc	r31, r25
     8d2:	cf 01       	movw	r24, r30
     8d4:	9b 8f       	std	Y+27, r25	; 0x1b
     8d6:	8a 8f       	std	Y+26, r24	; 0x1a
		sprintf(charray, "%2.1hhi", b);
     8d8:	89 89       	ldd	r24, Y+17	; 0x11
     8da:	8f 93       	push	r24
     8dc:	88 89       	ldd	r24, Y+16	; 0x10
     8de:	8f 93       	push	r24
     8e0:	80 e1       	ldi	r24, 0x10	; 16
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	89 2f       	mov	r24, r25
     8e6:	8f 93       	push	r24
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	8f 93       	push	r24
     8ee:	ce 01       	movw	r24, r28
     8f0:	4c 96       	adiw	r24, 0x1c	; 28
     8f2:	29 2f       	mov	r18, r25
     8f4:	2f 93       	push	r18
     8f6:	8f 93       	push	r24
     8f8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
		sprintf(charray1, "%.1hhi", e);
     908:	8b 8d       	ldd	r24, Y+27	; 0x1b
     90a:	8f 93       	push	r24
     90c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     90e:	8f 93       	push	r24
     910:	88 e1       	ldi	r24, 0x18	; 24
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	89 2f       	mov	r24, r25
     916:	8f 93       	push	r24
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	8f 93       	push	r24
     91e:	ce 01       	movw	r24, r28
     920:	81 96       	adiw	r24, 0x21	; 33
     922:	29 2f       	mov	r18, r25
     924:	2f 93       	push	r18
     926:	8f 93       	push	r24
     928:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0

		//Write flow to LCD	
		lcd_gotoxy(2, 1);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray);
     940:	ce 01       	movw	r24, r28
     942:	4c 96       	adiw	r24, 0x1c	; 28
     944:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(4, 1);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(",");
     950:	8f e1       	ldi	r24, 0x1F	; 31
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(5, 1);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	85 e0       	ldi	r24, 0x05	; 5
     95c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray1);
     960:	ce 01       	movw	r24, r28
     962:	81 96       	adiw	r24, 0x21	; 33
     964:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(8, 1);
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>

		////////////////////////////////////////
		//Set point

		//Code to split the double into two integers before it can be printed to the LCD
		b = LevelSetpoint;
     970:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <LevelSetpoint>
     974:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <LevelSetpoint+0x1>
     978:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <LevelSetpoint+0x2>
     97c:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <LevelSetpoint+0x3>
     980:	bc 01       	movw	r22, r24
     982:	cd 01       	movw	r24, r26
     984:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	99 8b       	std	Y+17, r25	; 0x11
     98e:	88 8b       	std	Y+16, r24	; 0x10
		num1 = LevelSetpoint * 100;
     990:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <LevelSetpoint>
     994:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <LevelSetpoint+0x1>
     998:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <LevelSetpoint+0x2>
     99c:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <LevelSetpoint+0x3>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	48 ec       	ldi	r20, 0xC8	; 200
     9a6:	52 e4       	ldi	r21, 0x42	; 66
     9a8:	bc 01       	movw	r22, r24
     9aa:	cd 01       	movw	r24, r26
     9ac:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	8a 8b       	std	Y+18, r24	; 0x12
     9b6:	9b 8b       	std	Y+19, r25	; 0x13
     9b8:	ac 8b       	std	Y+20, r26	; 0x14
     9ba:	bd 8b       	std	Y+21, r27	; 0x15
		c = num1;
     9bc:	6a 89       	ldd	r22, Y+18	; 0x12
     9be:	7b 89       	ldd	r23, Y+19	; 0x13
     9c0:	8c 89       	ldd	r24, Y+20	; 0x14
     9c2:	9d 89       	ldd	r25, Y+21	; 0x15
     9c4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fixsfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9f 8b       	std	Y+23, r25	; 0x17
     9ce:	8e 8b       	std	Y+22, r24	; 0x16
		d = b * 100;
     9d0:	28 89       	ldd	r18, Y+16	; 0x10
     9d2:	39 89       	ldd	r19, Y+17	; 0x11
     9d4:	44 e6       	ldi	r20, 0x64	; 100
     9d6:	42 9f       	mul	r20, r18
     9d8:	c0 01       	movw	r24, r0
     9da:	43 9f       	mul	r20, r19
     9dc:	90 0d       	add	r25, r0
     9de:	11 24       	eor	r1, r1
     9e0:	99 8f       	std	Y+25, r25	; 0x19
     9e2:	88 8f       	std	Y+24, r24	; 0x18
		e = c - d ;
     9e4:	2e 89       	ldd	r18, Y+22	; 0x16
     9e6:	3f 89       	ldd	r19, Y+23	; 0x17
     9e8:	88 8d       	ldd	r24, Y+24	; 0x18
     9ea:	99 8d       	ldd	r25, Y+25	; 0x19
     9ec:	a9 01       	movw	r20, r18
     9ee:	48 1b       	sub	r20, r24
     9f0:	59 0b       	sbc	r21, r25
     9f2:	ca 01       	movw	r24, r20
     9f4:	9b 8f       	std	Y+27, r25	; 0x1b
     9f6:	8a 8f       	std	Y+26, r24	; 0x1a
		sprintf(charray, "%2.1hhi", b);
     9f8:	89 89       	ldd	r24, Y+17	; 0x11
     9fa:	8f 93       	push	r24
     9fc:	88 89       	ldd	r24, Y+16	; 0x10
     9fe:	8f 93       	push	r24
     a00:	80 e1       	ldi	r24, 0x10	; 16
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	89 2f       	mov	r24, r25
     a06:	8f 93       	push	r24
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	8f 93       	push	r24
     a0e:	ce 01       	movw	r24, r28
     a10:	4c 96       	adiw	r24, 0x1c	; 28
     a12:	29 2f       	mov	r18, r25
     a14:	2f 93       	push	r18
     a16:	8f 93       	push	r24
     a18:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
		sprintf(charray1, "%.1hhi", e);
     a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a2a:	8f 93       	push	r24
     a2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a2e:	8f 93       	push	r24
     a30:	88 e1       	ldi	r24, 0x18	; 24
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	89 2f       	mov	r24, r25
     a36:	8f 93       	push	r24
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	8f 93       	push	r24
     a3e:	ce 01       	movw	r24, r28
     a40:	81 96       	adiw	r24, 0x21	; 33
     a42:	29 2f       	mov	r18, r25
     a44:	2f 93       	push	r18
     a46:	8f 93       	push	r24
     a48:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0

		//Write set point to LCD	
		lcd_gotoxy(10, 0);
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	8a e0       	ldi	r24, 0x0A	; 10
     a5c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray);
     a60:	ce 01       	movw	r24, r28
     a62:	4c 96       	adiw	r24, 0x1c	; 28
     a64:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(12, 0);
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	8c e0       	ldi	r24, 0x0C	; 12
     a6c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(",");
     a70:	8f e1       	ldi	r24, 0x1F	; 31
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(13, 0);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray1);
     a80:	ce 01       	movw	r24, r28
     a82:	81 96       	adiw	r24, 0x21	; 33
     a84:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
		lcd_gotoxy(15, 0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	8f e0       	ldi	r24, 0x0F	; 15
     a8c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>

		////////////////////////////////////////
		//Output

		output_unsigned = FlowOutput_inPercent;
     a90:	6c 85       	ldd	r22, Y+12	; 0x0c
     a92:	7d 85       	ldd	r23, Y+13	; 0x0d
     a94:	8e 85       	ldd	r24, Y+14	; 0x0e
     a96:	9f 85       	ldd	r25, Y+15	; 0x0f
     a98:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
		
		//Limits the output to 0..99
		if (output_unsigned>99)
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	84 36       	cpi	r24, 0x64	; 100
     aaa:	91 05       	cpc	r25, r1
     aac:	20 f0       	brcs	.+8      	; 0xab6 <main+0x48c>
		{
		output_unsigned= 99;
     aae:	83 e6       	ldi	r24, 0x63	; 99
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
		} 
		else if(output_unsigned<0)
		{
		output_unsigned = 0;
		}	
		sprintf(charray2, "%.1hi", output_unsigned);
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	8f 93       	push	r24
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	8f 93       	push	r24
     abe:	81 e2       	ldi	r24, 0x21	; 33
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	89 2f       	mov	r24, r25
     ac4:	8f 93       	push	r24
     ac6:	81 e2       	ldi	r24, 0x21	; 33
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	8f 93       	push	r24
     acc:	ce 01       	movw	r24, r28
     ace:	86 96       	adiw	r24, 0x26	; 38
     ad0:	29 2f       	mov	r18, r25
     ad2:	2f 93       	push	r18
     ad4:	8f 93       	push	r24
     ad6:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sprintf>
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0

		//Write output to LCD
		lcd_gotoxy(10, 1);
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	8a e0       	ldi	r24, 0x0A	; 10
     aea:	0e 94 21 02 	call	0x442	; 0x442 <lcd_gotoxy>
		lcd_puts(charray2);
     aee:	ce 01       	movw	r24, r28
     af0:	86 96       	adiw	r24, 0x26	; 38
     af2:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
	}
     af6:	d6 cd       	rjmp	.-1108   	; 0x6a4 <main+0x7a>

00000af8 <UpdatePID>:
	double iState; // Integrator state
	double iMax, iMin; // Maximum and minimum allowable integrator state
	double iGain, pGain, dGain;// integral gain, proportional gain, derivative gain
}PID;
double UpdatePID(PID * pid, double error, double position) //PID controller.
{
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	66 97       	sbiw	r28, 0x16	; 22
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	9e 87       	std	Y+14, r25	; 0x0e
     b1a:	8d 87       	std	Y+13, r24	; 0x0d
     b1c:	4f 87       	std	Y+15, r20	; 0x0f
     b1e:	58 8b       	std	Y+16, r21	; 0x10
     b20:	69 8b       	std	Y+17, r22	; 0x11
     b22:	7a 8b       	std	Y+18, r23	; 0x12
     b24:	0b 8b       	std	Y+19, r16	; 0x13
     b26:	1c 8b       	std	Y+20, r17	; 0x14
     b28:	2d 8b       	std	Y+21, r18	; 0x15
     b2a:	3e 8b       	std	Y+22, r19	; 0x16
	double pTerm, dTerm, iTerm;

	// calculate the proportional term
	pTerm = pid->pGain * error;
     b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b30:	fc 01       	movw	r30, r24
     b32:	84 89       	ldd	r24, Z+20	; 0x14
     b34:	95 89       	ldd	r25, Z+21	; 0x15
     b36:	a6 89       	ldd	r26, Z+22	; 0x16
     b38:	b7 89       	ldd	r27, Z+23	; 0x17
     b3a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b3c:	38 89       	ldd	r19, Y+16	; 0x10
     b3e:	49 89       	ldd	r20, Y+17	; 0x11
     b40:	5a 89       	ldd	r21, Y+18	; 0x12
     b42:	bc 01       	movw	r22, r24
     b44:	cd 01       	movw	r24, r26
     b46:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	ab 83       	std	Y+3, r26	; 0x03
     b54:	bc 83       	std	Y+4, r27	; 0x04
	
	// calculate the integral state with appropriate limiting and calculates the integral term
	pid->iState += error;
     b56:	8d 85       	ldd	r24, Y+13	; 0x0d
     b58:	9e 85       	ldd	r25, Y+14	; 0x0e
     b5a:	fc 01       	movw	r30, r24
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	95 81       	ldd	r25, Z+5	; 0x05
     b60:	a6 81       	ldd	r26, Z+6	; 0x06
     b62:	b7 81       	ldd	r27, Z+7	; 0x07
     b64:	2f 85       	ldd	r18, Y+15	; 0x0f
     b66:	38 89       	ldd	r19, Y+16	; 0x10
     b68:	49 89       	ldd	r20, Y+17	; 0x11
     b6a:	5a 89       	ldd	r21, Y+18	; 0x12
     b6c:	bc 01       	movw	r22, r24
     b6e:	cd 01       	movw	r24, r26
     b70:	0e 94 8d 0c 	call	0x191a	; 0x191a <__addsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	2d 85       	ldd	r18, Y+13	; 0x0d
     b7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     b7c:	f9 01       	movw	r30, r18
     b7e:	84 83       	std	Z+4, r24	; 0x04
     b80:	95 83       	std	Z+5, r25	; 0x05
     b82:	a6 83       	std	Z+6, r26	; 0x06
     b84:	b7 83       	std	Z+7, r27	; 0x07
	if (pid->iState > pid->iMax)pid->iState = pid->iMax;
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	fc 01       	movw	r30, r24
     b8c:	84 81       	ldd	r24, Z+4	; 0x04
     b8e:	95 81       	ldd	r25, Z+5	; 0x05
     b90:	a6 81       	ldd	r26, Z+6	; 0x06
     b92:	b7 81       	ldd	r27, Z+7	; 0x07
     b94:	2d 85       	ldd	r18, Y+13	; 0x0d
     b96:	3e 85       	ldd	r19, Y+14	; 0x0e
     b98:	f9 01       	movw	r30, r18
     b9a:	20 85       	ldd	r18, Z+8	; 0x08
     b9c:	31 85       	ldd	r19, Z+9	; 0x09
     b9e:	42 85       	ldd	r20, Z+10	; 0x0a
     ba0:	53 85       	ldd	r21, Z+11	; 0x0b
     ba2:	bc 01       	movw	r22, r24
     ba4:	cd 01       	movw	r24, r26
     ba6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	7c f4       	brge	.+30     	; 0xbcc <UpdatePID+0xd4>
     bae:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 85       	ldd	r24, Z+8	; 0x08
     bb6:	91 85       	ldd	r25, Z+9	; 0x09
     bb8:	a2 85       	ldd	r26, Z+10	; 0x0a
     bba:	b3 85       	ldd	r27, Z+11	; 0x0b
     bbc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bbe:	3e 85       	ldd	r19, Y+14	; 0x0e
     bc0:	f9 01       	movw	r30, r18
     bc2:	84 83       	std	Z+4, r24	; 0x04
     bc4:	95 83       	std	Z+5, r25	; 0x05
     bc6:	a6 83       	std	Z+6, r26	; 0x06
     bc8:	b7 83       	std	Z+7, r27	; 0x07
     bca:	22 c0       	rjmp	.+68     	; 0xc10 <UpdatePID+0x118>
	else if (pid->iState < pid->iMin) pid->iState = pid->iMin;
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	fc 01       	movw	r30, r24
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	95 81       	ldd	r25, Z+5	; 0x05
     bd6:	a6 81       	ldd	r26, Z+6	; 0x06
     bd8:	b7 81       	ldd	r27, Z+7	; 0x07
     bda:	2d 85       	ldd	r18, Y+13	; 0x0d
     bdc:	3e 85       	ldd	r19, Y+14	; 0x0e
     bde:	f9 01       	movw	r30, r18
     be0:	24 85       	ldd	r18, Z+12	; 0x0c
     be2:	35 85       	ldd	r19, Z+13	; 0x0d
     be4:	46 85       	ldd	r20, Z+14	; 0x0e
     be6:	57 85       	ldd	r21, Z+15	; 0x0f
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	74 f4       	brge	.+28     	; 0xc10 <UpdatePID+0x118>
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	fc 01       	movw	r30, r24
     bfa:	84 85       	ldd	r24, Z+12	; 0x0c
     bfc:	95 85       	ldd	r25, Z+13	; 0x0d
     bfe:	a6 85       	ldd	r26, Z+14	; 0x0e
     c00:	b7 85       	ldd	r27, Z+15	; 0x0f
     c02:	2d 85       	ldd	r18, Y+13	; 0x0d
     c04:	3e 85       	ldd	r19, Y+14	; 0x0e
     c06:	f9 01       	movw	r30, r18
     c08:	84 83       	std	Z+4, r24	; 0x04
     c0a:	95 83       	std	Z+5, r25	; 0x05
     c0c:	a6 83       	std	Z+6, r26	; 0x06
     c0e:	b7 83       	std	Z+7, r27	; 0x07
	iTerm = pid->iGain * pid->iState;
     c10:	8d 85       	ldd	r24, Y+13	; 0x0d
     c12:	9e 85       	ldd	r25, Y+14	; 0x0e
     c14:	fc 01       	movw	r30, r24
     c16:	80 89       	ldd	r24, Z+16	; 0x10
     c18:	91 89       	ldd	r25, Z+17	; 0x11
     c1a:	a2 89       	ldd	r26, Z+18	; 0x12
     c1c:	b3 89       	ldd	r27, Z+19	; 0x13
     c1e:	2d 85       	ldd	r18, Y+13	; 0x0d
     c20:	3e 85       	ldd	r19, Y+14	; 0x0e
     c22:	f9 01       	movw	r30, r18
     c24:	24 81       	ldd	r18, Z+4	; 0x04
     c26:	35 81       	ldd	r19, Z+5	; 0x05
     c28:	46 81       	ldd	r20, Z+6	; 0x06
     c2a:	57 81       	ldd	r21, Z+7	; 0x07
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	af 83       	std	Y+7, r26	; 0x07
     c3e:	b8 87       	std	Y+8, r27	; 0x08
	
	// calculates the derivate term and stores the state
	dTerm = pid->dGain * (position - pid->dState);
     c40:	8d 85       	ldd	r24, Y+13	; 0x0d
     c42:	9e 85       	ldd	r25, Y+14	; 0x0e
     c44:	fc 01       	movw	r30, r24
     c46:	c0 8c       	ldd	r12, Z+24	; 0x18
     c48:	d1 8c       	ldd	r13, Z+25	; 0x19
     c4a:	e2 8c       	ldd	r14, Z+26	; 0x1a
     c4c:	f3 8c       	ldd	r15, Z+27	; 0x1b
     c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c50:	9e 85       	ldd	r25, Y+14	; 0x0e
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	a2 81       	ldd	r26, Z+2	; 0x02
     c5a:	b3 81       	ldd	r27, Z+3	; 0x03
     c5c:	9c 01       	movw	r18, r24
     c5e:	ad 01       	movw	r20, r26
     c60:	6b 89       	ldd	r22, Y+19	; 0x13
     c62:	7c 89       	ldd	r23, Y+20	; 0x14
     c64:	8d 89       	ldd	r24, Y+21	; 0x15
     c66:	9e 89       	ldd	r25, Y+22	; 0x16
     c68:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	9c 01       	movw	r18, r24
     c72:	ad 01       	movw	r20, r26
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	89 87       	std	Y+9, r24	; 0x09
     c82:	9a 87       	std	Y+10, r25	; 0x0a
     c84:	ab 87       	std	Y+11, r26	; 0x0b
     c86:	bc 87       	std	Y+12, r27	; 0x0c
	pid->dState = position;
     c88:	2d 85       	ldd	r18, Y+13	; 0x0d
     c8a:	3e 85       	ldd	r19, Y+14	; 0x0e
     c8c:	8b 89       	ldd	r24, Y+19	; 0x13
     c8e:	9c 89       	ldd	r25, Y+20	; 0x14
     c90:	ad 89       	ldd	r26, Y+21	; 0x15
     c92:	be 89       	ldd	r27, Y+22	; 0x16
     c94:	f9 01       	movw	r30, r18
     c96:	80 83       	st	Z, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	a2 83       	std	Z+2, r26	; 0x02
     c9c:	b3 83       	std	Z+3, r27	; 0x03

	// returns result
	return pTerm + iTerm - dTerm;
     c9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ca0:	3e 81       	ldd	r19, Y+6	; 0x06
     ca2:	4f 81       	ldd	r20, Y+7	; 0x07
     ca4:	58 85       	ldd	r21, Y+8	; 0x08
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
     ca8:	7a 81       	ldd	r23, Y+2	; 0x02
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	0e 94 8d 0c 	call	0x191a	; 0x191a <__addsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	29 85       	ldd	r18, Y+9	; 0x09
     cb8:	3a 85       	ldd	r19, Y+10	; 0x0a
     cba:	4b 85       	ldd	r20, Y+11	; 0x0b
     cbc:	5c 85       	ldd	r21, Y+12	; 0x0c
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
}
     cca:	bc 01       	movw	r22, r24
     ccc:	cd 01       	movw	r24, r26
     cce:	66 96       	adiw	r28, 0x16	; 22
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <InitialiseGeneral>:
//End of example code

void InitialiseGeneral() //General stuff which doesn't go in the other initialization functions.
{
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
			LAL LED = PA?
			PWM = PE3
	*/
	//Port declaration
	//Buttons
	DDRL = 0x00; //Port L input
     cf4:	8a e0       	ldi	r24, 0x0A	; 10
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	fc 01       	movw	r30, r24
     cfa:	10 82       	st	Z, r1
	PORTL = 0xFF; //Pull up resistors
     cfc:	8b e0       	ldi	r24, 0x0B	; 11
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	2f ef       	ldi	r18, 0xFF	; 255
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
	DDRE = 0b00001000;
     d06:	8d e2       	ldi	r24, 0x2D	; 45
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	28 e0       	ldi	r18, 0x08	; 8
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
	PORTE = 0x00;
     d10:	8e e2       	ldi	r24, 0x2E	; 46
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	10 82       	st	Z, r1
	//LED
	DDRA = 0xFF; //Port A output
     d18:	81 e2       	ldi	r24, 0x21	; 33
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
	PORTA = 0x00; //Initially off
     d22:	82 e2       	ldi	r24, 0x22	; 34
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	10 82       	st	Z, r1
	
	DDRB = 0x00;
     d2a:	84 e2       	ldi	r24, 0x24	; 36
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	fc 01       	movw	r30, r24
     d30:	10 82       	st	Z, r1
	PORTB = 0xFF; //Pull up resistors
     d32:	85 e2       	ldi	r24, 0x25	; 37
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	2f ef       	ldi	r18, 0xFF	; 255
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
	//Variable initialization
	//temp declaration
	LevelSetpoint = 50;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a8 e4       	ldi	r26, 0x48	; 72
     d42:	b2 e4       	ldi	r27, 0x42	; 66
     d44:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <LevelSetpoint>
     d48:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <LevelSetpoint+0x1>
     d4c:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <LevelSetpoint+0x2>
     d50:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <LevelSetpoint+0x3>

	//Temp. The position values will come from analog inputs
	FlowPosition = 10;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e2       	ldi	r26, 0x20	; 32
     d5a:	b1 e4       	ldi	r27, 0x41	; 65
     d5c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <FlowPosition>
     d60:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <FlowPosition+0x1>
     d64:	a0 93 88 02 	sts	0x0288, r26	; 0x800288 <FlowPosition+0x2>
     d68:	b0 93 89 02 	sts	0x0289, r27	; 0x800289 <FlowPosition+0x3>
	LevelPosition = 10;
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e2       	ldi	r26, 0x20	; 32
     d72:	b1 e4       	ldi	r27, 0x41	; 65
     d74:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <LevelPosition>
     d78:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <LevelPosition+0x1>
     d7c:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <LevelPosition+0x2>
     d80:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <LevelPosition+0x3>
	
	//Initialize values to flow controller
	FlowController.iGain = 1;
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e8       	ldi	r26, 0x80	; 128
     d8a:	bf e3       	ldi	r27, 0x3F	; 63
     d8c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <FlowController+0x10>
     d90:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <FlowController+0x11>
     d94:	a0 93 43 02 	sts	0x0243, r26	; 0x800243 <FlowController+0x12>
     d98:	b0 93 44 02 	sts	0x0244, r27	; 0x800244 <FlowController+0x13>
	FlowController.pGain = 1;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a0 e8       	ldi	r26, 0x80	; 128
     da2:	bf e3       	ldi	r27, 0x3F	; 63
     da4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <FlowController+0x14>
     da8:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <FlowController+0x15>
     dac:	a0 93 47 02 	sts	0x0247, r26	; 0x800247 <FlowController+0x16>
     db0:	b0 93 48 02 	sts	0x0248, r27	; 0x800248 <FlowController+0x17>
	FlowController.dGain = 10;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e2       	ldi	r26, 0x20	; 32
     dba:	b1 e4       	ldi	r27, 0x41	; 65
     dbc:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <FlowController+0x18>
     dc0:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <FlowController+0x19>
     dc4:	a0 93 4b 02 	sts	0x024B, r26	; 0x80024b <FlowController+0x1a>
     dc8:	b0 93 4c 02 	sts	0x024C, r27	; 0x80024c <FlowController+0x1b>
	FlowController.iMax = 100;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a8 ec       	ldi	r26, 0xC8	; 200
     dd2:	b2 e4       	ldi	r27, 0x42	; 66
     dd4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <FlowController+0x8>
     dd8:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <FlowController+0x9>
     ddc:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <FlowController+0xa>
     de0:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <FlowController+0xb>
	FlowController.iMin = 0;
     de4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <FlowController+0xc>
     de8:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <FlowController+0xd>
     dec:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <FlowController+0xe>
     df0:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <FlowController+0xf>

	//Again but for the level controller
	LevelController.iGain = 1;
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a0 e8       	ldi	r26, 0x80	; 128
     dfa:	bf e3       	ldi	r27, 0x3F	; 63
     dfc:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <LevelController+0x10>
     e00:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <LevelController+0x11>
     e04:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <LevelController+0x12>
     e08:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <LevelController+0x13>
	LevelController.pGain = 1;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	a0 e8       	ldi	r26, 0x80	; 128
     e12:	bf e3       	ldi	r27, 0x3F	; 63
     e14:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <LevelController+0x14>
     e18:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <LevelController+0x15>
     e1c:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <LevelController+0x16>
     e20:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <LevelController+0x17>
	LevelController.dGain = 10;
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e2       	ldi	r26, 0x20	; 32
     e2a:	b1 e4       	ldi	r27, 0x41	; 65
     e2c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <LevelController+0x18>
     e30:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <LevelController+0x19>
     e34:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <LevelController+0x1a>
     e38:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <LevelController+0x1b>
	LevelController.iMax = 100;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a8 ec       	ldi	r26, 0xC8	; 200
     e42:	b2 e4       	ldi	r27, 0x42	; 66
     e44:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <LevelController+0x8>
     e48:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <LevelController+0x9>
     e4c:	a0 93 60 02 	sts	0x0260, r26	; 0x800260 <LevelController+0xa>
     e50:	b0 93 61 02 	sts	0x0261, r27	; 0x800261 <LevelController+0xb>
	LevelController.iMin = 0;
     e54:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <LevelController+0xc>
     e58:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <LevelController+0xd>
     e5c:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <LevelController+0xe>
     e60:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <LevelController+0xf>

	sei(); //Enable interrupt
     e64:	78 94       	sei
}
     e66:	00 00       	nop
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <InitialiseTimer1>:

//All the 
void InitialiseTimer1() //Copied from TimerDemo3. Generates interrupt on a one second interval. This will be changed.
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	10 82       	st	Z, r1
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
     e7e:	81 e8       	ldi	r24, 0x81	; 129
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	2d e0       	ldi	r18, 0x0D	; 13
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
	TCCR1C = 0b00000000;
     e88:	82 e8       	ldi	r24, 0x82	; 130
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	10 82       	st	Z, r1
	OCR1AH = 0x03; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
     e90:	89 e8       	ldi	r24, 0x89	; 137
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	23 e0       	ldi	r18, 0x03	; 3
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
	OCR1AL = 0xD0;
     e9a:	88 e8       	ldi	r24, 0x88	; 136
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	20 ed       	ldi	r18, 0xD0	; 208
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18
	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
     ea4:	85 e8       	ldi	r24, 0x85	; 133
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	10 82       	st	Z, r1
	TCNT1L = 0b00000000;
     eac:	84 e8       	ldi	r24, 0x84	; 132
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	10 82       	st	Z, r1
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
     eb4:	8f e6       	ldi	r24, 0x6F	; 111
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
	// when the timer reaches the set value (in the OCR1A register)
}
     ebe:	00 00       	nop
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <InitialiseADC>:

void InitialiseADC() //ADC. Copied from TwoPotentiometers. Most of the comments are removed, but the rest is unchanged. Converts level and flow.
{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b01100010;	// AVCC REF, Left-adjust output (Read most-significant 8 bits via ADCH), Convert channel 2
     ece:	8c e7       	ldi	r24, 0x7C	; 124
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	22 e6       	ldi	r18, 0x62	; 98
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
	ADCSRA = 0b10101101;	// ADC enabled, Auto trigger, Interrupt enabled, Prescaler = 32
     ed8:	8a e7       	ldi	r24, 0x7A	; 122
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2d ea       	ldi	r18, 0xAD	; 173
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
	ADCSRB &= 0b11110000;	// clear bits 3,2,1,0 (Free running mode)
     ee2:	8b e7       	ldi	r24, 0x7B	; 123
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	2b e7       	ldi	r18, 0x7B	; 123
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	f9 01       	movw	r30, r18
     eec:	20 81       	ld	r18, Z
     eee:	20 7f       	andi	r18, 0xF0	; 240
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
	DIDR0 = 0b00001100;	// Disable digital input on bits 2 and 3
     ef4:	8e e7       	ldi	r24, 0x7E	; 126
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	2c e0       	ldi	r18, 0x0C	; 12
     efa:	fc 01       	movw	r30, r24
     efc:	20 83       	st	Z, r18
	DIDR2 = 0b11111111;	// Disable digital input on all bits (64-pin version of ATmega1281 does not even have these inputs)
     efe:	8d e7       	ldi	r24, 0x7D	; 125
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	2f ef       	ldi	r18, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
	ADCSRA |= 0b01000000;	// start ADC conversion
     f08:	8a e7       	ldi	r24, 0x7A	; 122
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	2a e7       	ldi	r18, 0x7A	; 122
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	f9 01       	movw	r30, r18
     f12:	20 81       	ld	r18, Z
     f14:	20 64       	ori	r18, 0x40	; 64
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
}
     f1a:	00 00       	nop
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <InitialiseTimer3_FastPWM_Single>:

void InitialiseTimer3_FastPWM_Single() //PWM. Copied from PWM_Servo_Singe_Potentiometer. Controls the servo.
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0b10000010;	// Fast PWM non inverting, ICR3 used as TOP
     f2a:	80 e9       	ldi	r24, 0x90	; 144
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	22 e8       	ldi	r18, 0x82	; 130
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
	TCCR3B = 0b00011001;	// Fast PWM, Use Prescaler '1'
     f34:	81 e9       	ldi	r24, 0x91	; 145
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	29 e1       	ldi	r18, 0x19	; 25
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18
	TCCR3C = 0b00000000;
     f3e:	82 e9       	ldi	r24, 0x92	; 146
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	fc 01       	movw	r30, r24
     f44:	10 82       	st	Z, r1
	ICR3 = 25000;
     f46:	86 e9       	ldi	r24, 0x96	; 150
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	28 ea       	ldi	r18, 0xA8	; 168
     f4c:	31 e6       	ldi	r19, 0x61	; 97
     f4e:	fc 01       	movw	r30, r24
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	20 83       	st	Z, r18
	TCNT3H = 0; // 16-bit access (write high byte first, read low byte first)
     f54:	85 e9       	ldi	r24, 0x95	; 149
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	10 82       	st	Z, r1
	TCNT3L = 0;
     f5c:	84 e9       	ldi	r24, 0x94	; 148
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	10 82       	st	Z, r1
	OCR3A = 1750;
     f64:	88 e9       	ldi	r24, 0x98	; 152
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	26 ed       	ldi	r18, 0xD6	; 214
     f6a:	36 e0       	ldi	r19, 0x06	; 6
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 83       	std	Z+1, r19	; 0x01
     f70:	20 83       	st	Z, r18
	TIMSK3 = 0b00000000;	// No interrupts needed, PWM pulses appears directly on OC3A, OC3B (Port E Bits 3,4)
     f72:	81 e7       	ldi	r24, 0x71	; 113
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	10 82       	st	Z, r1
	TIFR3 = 0b00101111;		// Clear all interrupt flags
     f7a:	88 e3       	ldi	r24, 0x38	; 56
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2f e2       	ldi	r18, 0x2F	; 47
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
}
     f84:	00 00       	nop
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <Initialise_HW_Interrupts>:

void Initialise_HW_Interrupts() //Hardware interrupts. Copied from TimerDemo4. Used as level alarms; high and low.
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	//EICRB = 0b00001010;		// INT7 ... 4 not used      EICRB = 0b00001010;
	//
	//EIMSK = 0b00111100;		// Enable INT1, INT0
	//EIFR = 0b00111100;		// Clear INT1 and INT0 interrupt flags (in case a spurious interrupt has occurred during chip startup)
	
	PCICR = 0b00000001;  /// Port Change Interrupt control registers
     f94:	88 e6       	ldi	r24, 0x68	; 104
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
	PCIFR = 0b00000001;
     f9e:	8b e3       	ldi	r24, 0x3B	; 59
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18
	PCMSK0 = 0b11000000;
     fa8:	8b e6       	ldi	r24, 0x6B	; 107
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	20 ec       	ldi	r18, 0xC0	; 192
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
	}
     fb2:	00 00       	nop
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <__vector_29>:

ISR(ADC_vect) // ADC Interrupt Handler. Also from TwoPotentiometers with minimal changes. This interrupt handler is common for all ADC channels
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     fca:	0f 92       	push	r0
     fcc:	2f 93       	push	r18
     fce:	3f 93       	push	r19
     fd0:	4f 93       	push	r20
     fd2:	5f 93       	push	r21
     fd4:	6f 93       	push	r22
     fd6:	7f 93       	push	r23
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	ef 93       	push	r30
     fe2:	ff 93       	push	r31
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	1f 92       	push	r1
     fea:	1f 92       	push	r1
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	// Need to alternate which channel is converted
	unsigned char ADMUX_temp = ADMUX;
     ff0:	8c e7       	ldi	r24, 0x7C	; 124
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char ADCH_temp = ADCH;
     ffa:	89 e7       	ldi	r24, 0x79	; 121
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	fc 01       	movw	r30, r24
    1000:	80 81       	ld	r24, Z
    1002:	8a 83       	std	Y+2, r24	; 0x02
	
	ADMUX_temp &= 0b00011111;	// Mask off non-multiplexer bits
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	8f 71       	andi	r24, 0x1F	; 31
    1008:	89 83       	std	Y+1, r24	; 0x01
	if(0b00000010 == ADMUX_temp)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	c9 f4       	brne	.+50     	; 0x1042 <__vector_29+0x88>
	{
		LevelPosition = ADCH_temp;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__floatunsisf>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <LevelPosition>
    102a:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <LevelPosition+0x1>
    102e:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <LevelPosition+0x2>
    1032:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <LevelPosition+0x3>
		ADMUX = 0b01100011;		// Set ADMUX ADC register - next conversion is for ADC3
    1036:	8c e7       	ldi	r24, 0x7C	; 124
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	23 e6       	ldi	r18, 0x63	; 99
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
	else
	{
		FlowPosition = ADCH_temp;
		ADMUX = 0b01100010;		// Set ADMUX ADC register - next conversion is for ADC2
	}
}
    1040:	18 c0       	rjmp	.+48     	; 0x1072 <__vector_29+0xb8>
		LevelPosition = ADCH_temp;
		ADMUX = 0b01100011;		// Set ADMUX ADC register - next conversion is for ADC3
	}
	else
	{
		FlowPosition = ADCH_temp;
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__floatunsisf>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <FlowPosition>
    105c:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <FlowPosition+0x1>
    1060:	a0 93 88 02 	sts	0x0288, r26	; 0x800288 <FlowPosition+0x2>
    1064:	b0 93 89 02 	sts	0x0289, r27	; 0x800289 <FlowPosition+0x3>
		ADMUX = 0b01100010;		// Set ADMUX ADC register - next conversion is for ADC2
    1068:	8c e7       	ldi	r24, 0x7C	; 124
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	22 e6       	ldi	r18, 0x62	; 98
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
	}
}
    1072:	00 00       	nop
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    109a:	0f 90       	pop	r0
    109c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_17>:

ISR(TIMER1_COMPA_vect) //Runs the PID regulators when timer 1 triggers.
{
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    10b6:	0f 92       	push	r0
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	1f 92       	push	r1
    10da:	1f 92       	push	r1
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	LevelError = LevelPosition - LevelSetpoint; //Difference between wanted level and current level
    10e0:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <LevelPosition>
    10e4:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <LevelPosition+0x1>
    10e8:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <LevelPosition+0x2>
    10ec:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <LevelPosition+0x3>
    10f0:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <LevelSetpoint>
    10f4:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <LevelSetpoint+0x1>
    10f8:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <LevelSetpoint+0x2>
    10fc:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <LevelSetpoint+0x3>
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <LevelError>
    1110:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <LevelError+0x1>
    1114:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <LevelError+0x2>
    1118:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <LevelError+0x3>
	LevelOutput = UpdatePID(&LevelController, LevelError, LevelPosition); //Master. In cascade regulation, the master regulator calculates the set point for the slave.
    111c:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <LevelPosition>
    1120:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <LevelPosition+0x1>
    1124:	40 91 53 02 	lds	r20, 0x0253	; 0x800253 <LevelPosition+0x2>
    1128:	50 91 54 02 	lds	r21, 0x0254	; 0x800254 <LevelPosition+0x3>
    112c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <LevelError>
    1130:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <LevelError+0x1>
    1134:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <LevelError+0x2>
    1138:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <LevelError+0x3>
    113c:	89 01       	movw	r16, r18
    113e:	9a 01       	movw	r18, r20
    1140:	ac 01       	movw	r20, r24
    1142:	bd 01       	movw	r22, r26
    1144:	86 e5       	ldi	r24, 0x56	; 86
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <UpdatePID>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <LevelOutput>
    1154:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <LevelOutput+0x1>
    1158:	a0 93 4f 02 	sts	0x024F, r26	; 0x80024f <LevelOutput+0x2>
    115c:	b0 93 50 02 	sts	0x0250, r27	; 0x800250 <LevelOutput+0x3>

	FlowError = FlowPosition - LevelOutput; //Difference between wanted flow and current flow
    1160:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <FlowPosition>
    1164:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <FlowPosition+0x1>
    1168:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <FlowPosition+0x2>
    116c:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <FlowPosition+0x3>
    1170:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <LevelOutput>
    1174:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <LevelOutput+0x1>
    1178:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <LevelOutput+0x2>
    117c:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <LevelOutput+0x3>
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__subsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <FlowError>
    1190:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <FlowError+0x1>
    1194:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <FlowError+0x2>
    1198:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <FlowError+0x3>
	FlowOutput = UpdatePID(&FlowController, FlowError, FlowPosition); //Slave. Uses the set point from the master to regulate the servo.
    119c:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <FlowPosition>
    11a0:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <FlowPosition+0x1>
    11a4:	40 91 88 02 	lds	r20, 0x0288	; 0x800288 <FlowPosition+0x2>
    11a8:	50 91 89 02 	lds	r21, 0x0289	; 0x800289 <FlowPosition+0x3>
    11ac:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <FlowError>
    11b0:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <FlowError+0x1>
    11b4:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <FlowError+0x2>
    11b8:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <FlowError+0x3>
    11bc:	89 01       	movw	r16, r18
    11be:	9a 01       	movw	r18, r20
    11c0:	ac 01       	movw	r20, r24
    11c2:	bd 01       	movw	r22, r26
    11c4:	81 e3       	ldi	r24, 0x31	; 49
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <UpdatePID>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <FlowOutput>
    11d4:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <FlowOutput+0x1>
    11d8:	a0 93 83 02 	sts	0x0283, r26	; 0x800283 <FlowOutput+0x2>
    11dc:	b0 93 84 02 	sts	0x0284, r27	; 0x800284 <FlowOutput+0x3>

	//Servo output. Scaling and limiting the output.
	unsigned PWM_output = FlowOutput + 2000;
    11e0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <FlowOutput>
    11e4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <FlowOutput+0x1>
    11e8:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <FlowOutput+0x2>
    11ec:	b0 91 84 02 	lds	r27, 0x0284	; 0x800284 <FlowOutput+0x3>
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 8d 0c 	call	0x191a	; 0x191a <__addsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01

	if (PWM_output>2500)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	85 3c       	cpi	r24, 0xC5	; 197
    121a:	99 40       	sbci	r25, 0x09	; 9
    121c:	28 f0       	brcs	.+10     	; 0x1228 <__vector_17+0x182>
	{
	PWM_output= 2500;
    121e:	84 ec       	ldi	r24, 0xC4	; 196
    1220:	99 e0       	ldi	r25, 0x09	; 9
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	09 c0       	rjmp	.+18     	; 0x123a <__vector_17+0x194>
	}
	else if(PWM_output<1500)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	8c 3d       	cpi	r24, 0xDC	; 220
    122e:	95 40       	sbci	r25, 0x05	; 5
    1230:	20 f4       	brcc	.+8      	; 0x123a <__vector_17+0x194>
	{
	PWM_output = 1500;
    1232:	8c ed       	ldi	r24, 0xDC	; 220
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01
	}

	OCR3A = PWM_output;
    123a:	88 e9       	ldi	r24, 0x98	; 152
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	29 81       	ldd	r18, Y+1	; 0x01
    1240:	3a 81       	ldd	r19, Y+2	; 0x02
    1242:	fc 01       	movw	r30, r24
    1244:	31 83       	std	Z+1, r19	; 0x01
    1246:	20 83       	st	Z, r18
}
    1248:	00 00       	nop
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	bf 91       	pop	r27
    1258:	af 91       	pop	r26
    125a:	9f 91       	pop	r25
    125c:	8f 91       	pop	r24
    125e:	7f 91       	pop	r23
    1260:	6f 91       	pop	r22
    1262:	5f 91       	pop	r21
    1264:	4f 91       	pop	r20
    1266:	3f 91       	pop	r19
    1268:	2f 91       	pop	r18
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	0f 90       	pop	r0
    1270:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1274:	0f 90       	pop	r0
    1276:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_9>:
	////LAL_triggered = 1;
	////LED_Pattern |= 0b01000000;
//}
//
ISR(PCINT0_vect) //Level alarm high and low.
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1290:	0f 92       	push	r0
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	2e 97       	sbiw	r28, 0x0e	; 14
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	cd bf       	out	0x3d, r28	; 61
	
	if (0x7F == PINB)//LAH_triggered
    12b8:	83 e2       	ldi	r24, 0x23	; 35
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	fc 01       	movw	r30, r24
    12be:	80 81       	ld	r24, Z
    12c0:	8f 37       	cpi	r24, 0x7F	; 127
    12c2:	29 f4       	brne	.+10     	; 0x12ce <__vector_9+0x4e>
	{
		LED_Pattern |=0x80;
    12c4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <LED_Pattern>
    12c8:	80 68       	ori	r24, 0x80	; 128
    12ca:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <LED_Pattern>
	}
	if (0xBF == PINB)//LAL_triggered
    12ce:	83 e2       	ldi	r24, 0x23	; 35
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 3b       	cpi	r24, 0xBF	; 191
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <__vector_9+0x64>
	{
		LED_Pattern |=0x40;
    12da:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <LED_Pattern>
    12de:	80 64       	ori	r24, 0x40	; 64
    12e0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <LED_Pattern>
	}
	if (0x3F == PINB)//LAL_triggered and LAH_triggered
    12e4:	83 e2       	ldi	r24, 0x23	; 35
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	8f 33       	cpi	r24, 0x3F	; 63
    12ee:	39 f4       	brne	.+14     	; 0x12fe <__vector_9+0x7e>
	{
		LED_Pattern &=0x00;
    12f0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <LED_Pattern>
		LED_Pattern |=0x20;
    12f4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <LED_Pattern>
    12f8:	80 62       	ori	r24, 0x20	; 32
    12fa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <LED_Pattern>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a8 ec       	ldi	r26, 0xC8	; 200
    1304:	b2 e4       	ldi	r27, 0x42	; 66
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	ab 83       	std	Y+3, r26	; 0x03
    130c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a e7       	ldi	r20, 0x7A	; 122
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	af 83       	std	Y+7, r26	; 0x07
    132c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	6d 81       	ldd	r22, Y+5	; 0x05
    1338:	7e 81       	ldd	r23, Y+6	; 0x06
    133a:	8f 81       	ldd	r24, Y+7	; 0x07
    133c:	98 85       	ldd	r25, Y+8	; 0x08
    133e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
    1342:	88 23       	and	r24, r24
    1344:	2c f4       	brge	.+10     	; 0x1350 <__vector_9+0xd0>
		__ticks = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9a 87       	std	Y+10, r25	; 0x0a
    134c:	89 87       	std	Y+9, r24	; 0x09
    134e:	3f c0       	rjmp	.+126    	; 0x13ce <__vector_9+0x14e>
	else if (__tmp > 65535)
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	6d 81       	ldd	r22, Y+5	; 0x05
    135a:	7e 81       	ldd	r23, Y+6	; 0x06
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	98 85       	ldd	r25, Y+8	; 0x08
    1360:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__gesf2>
    1364:	18 16       	cp	r1, r24
    1366:	4c f5       	brge	.+82     	; 0x13ba <__vector_9+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	69 81       	ldd	r22, Y+1	; 0x01
    1372:	7a 81       	ldd	r23, Y+2	; 0x02
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9a 87       	std	Y+10, r25	; 0x0a
    138e:	89 87       	std	Y+9, r24	; 0x09
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <__vector_9+0x130>
    1392:	89 e1       	ldi	r24, 0x19	; 25
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 87       	std	Y+12, r25	; 0x0c
    1398:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    139a:	8b 85       	ldd	r24, Y+11	; 0x0b
    139c:	9c 85       	ldd	r25, Y+12	; 0x0c
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <__vector_9+0x11e>
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	9a 87       	std	Y+10, r25	; 0x0a
    13ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	89 2b       	or	r24, r25
    13b6:	69 f7       	brne	.-38     	; 0x1392 <__vector_9+0x112>
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <__vector_9+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ba:	6d 81       	ldd	r22, Y+5	; 0x05
    13bc:	7e 81       	ldd	r23, Y+6	; 0x06
    13be:	8f 81       	ldd	r24, Y+7	; 0x07
    13c0:	98 85       	ldd	r25, Y+8	; 0x08
    13c2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9a 87       	std	Y+10, r25	; 0x0a
    13cc:	89 87       	std	Y+9, r24	; 0x09
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	9e 87       	std	Y+14, r25	; 0x0e
    13d4:	8d 87       	std	Y+13, r24	; 0x0d
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <__vector_9+0x15a>
    13de:	9e 87       	std	Y+14, r25	; 0x0e
    13e0:	8d 87       	std	Y+13, r24	; 0x0d
	}
	_delay_ms(100);
	PORTA = LED_Pattern;
    13e2:	82 e2       	ldi	r24, 0x22	; 34
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <LED_Pattern>
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18

}
    13ee:	00 00       	nop
    13f0:	2e 96       	adiw	r28, 0x0e	; 14
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    141e:	0f 90       	pop	r0
    1420:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	a1 97       	sbiw	r28, 0x21	; 33
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <i2c_init>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e2       	ldi	r26, 0x20	; 32
    1448:	b1 e4       	ldi	r27, 0x41	; 65
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	9b 83       	std	Y+3, r25	; 0x03
    144e:	ac 83       	std	Y+4, r26	; 0x04
    1450:	bd 83       	std	Y+5, r27	; 0x05
    1452:	2b ea       	ldi	r18, 0xAB	; 171
    1454:	3a ea       	ldi	r19, 0xAA	; 170
    1456:	4a ea       	ldi	r20, 0xAA	; 170
    1458:	5e e3       	ldi	r21, 0x3E	; 62
    145a:	6a 81       	ldd	r22, Y+2	; 0x02
    145c:	7b 81       	ldd	r23, Y+3	; 0x03
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	9f 83       	std	Y+7, r25	; 0x07
    146e:	a8 87       	std	Y+8, r26	; 0x08
    1470:	b9 87       	std	Y+9, r27	; 0x09
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5e e3       	ldi	r21, 0x3E	; 62
    147a:	6a 81       	ldd	r22, Y+2	; 0x02
    147c:	7b 81       	ldd	r23, Y+3	; 0x03
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8a 87       	std	Y+10, r24	; 0x0a
    148c:	9b 87       	std	Y+11, r25	; 0x0b
    148e:	ac 87       	std	Y+12, r26	; 0x0c
    1490:	bd 87       	std	Y+13, r27	; 0x0d
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	6e 81       	ldd	r22, Y+6	; 0x06
    149c:	7f 81       	ldd	r23, Y+7	; 0x07
    149e:	88 85       	ldd	r24, Y+8	; 0x08
    14a0:	99 85       	ldd	r25, Y+9	; 0x09
    14a2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	1c f4       	brge	.+6      	; 0x14b0 <pcf8574_init+0x86>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	8e 87       	std	Y+14, r24	; 0x0e
    14ae:	b2 c0       	rjmp	.+356    	; 0x1614 <pcf8574_init+0x1ea>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	4f e7       	ldi	r20, 0x7F	; 127
    14b6:	57 e4       	ldi	r21, 0x47	; 71
    14b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    14ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    14bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    14be:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__gesf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <pcf8574_init+0xa0>
    14c8:	7b c0       	rjmp	.+246    	; 0x15c0 <pcf8574_init+0x196>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	6a 81       	ldd	r22, Y+2	; 0x02
    14d4:	7b 81       	ldd	r23, Y+3	; 0x03
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 87       	std	Y+15, r24	; 0x0f
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	a9 8b       	std	Y+17, r26	; 0x11
    14e8:	ba 8b       	std	Y+18, r27	; 0x12
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a e7       	ldi	r20, 0x7A	; 122
    14f0:	53 e4       	ldi	r21, 0x43	; 67
    14f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    14f4:	78 89       	ldd	r23, Y+16	; 0x10
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8b 8b       	std	Y+19, r24	; 0x13
    1504:	9c 8b       	std	Y+20, r25	; 0x14
    1506:	ad 8b       	std	Y+21, r26	; 0x15
    1508:	be 8b       	std	Y+22, r27	; 0x16
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	6b 89       	ldd	r22, Y+19	; 0x13
    1514:	7c 89       	ldd	r23, Y+20	; 0x14
    1516:	8d 89       	ldd	r24, Y+21	; 0x15
    1518:	9e 89       	ldd	r25, Y+22	; 0x16
    151a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__cmpsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <pcf8574_init+0x102>
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	98 8f       	std	Y+24, r25	; 0x18
    1528:	8f 8b       	std	Y+23, r24	; 0x17
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <pcf8574_init+0x180>
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	6b 89       	ldd	r22, Y+19	; 0x13
    1536:	7c 89       	ldd	r23, Y+20	; 0x14
    1538:	8d 89       	ldd	r24, Y+21	; 0x15
    153a:	9e 89       	ldd	r25, Y+22	; 0x16
    153c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__gesf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <pcf8574_init+0x16c>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	6f 85       	ldd	r22, Y+15	; 0x0f
    154e:	78 89       	ldd	r23, Y+16	; 0x10
    1550:	89 89       	ldd	r24, Y+17	; 0x11
    1552:	9a 89       	ldd	r25, Y+18	; 0x12
    1554:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	98 8f       	std	Y+24, r25	; 0x18
    156a:	8f 8b       	std	Y+23, r24	; 0x17
    156c:	0f c0       	rjmp	.+30     	; 0x158c <pcf8574_init+0x162>
    156e:	89 e1       	ldi	r24, 0x19	; 25
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9a 8f       	std	Y+26, r25	; 0x1a
    1574:	89 8f       	std	Y+25, r24	; 0x19
    1576:	89 8d       	ldd	r24, Y+25	; 0x19
    1578:	9a 8d       	ldd	r25, Y+26	; 0x1a
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <pcf8574_init+0x150>
    157e:	9a 8f       	std	Y+26, r25	; 0x1a
    1580:	89 8f       	std	Y+25, r24	; 0x19
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	98 8d       	ldd	r25, Y+24	; 0x18
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	98 8f       	std	Y+24, r25	; 0x18
    158a:	8f 8b       	std	Y+23, r24	; 0x17
    158c:	8f 89       	ldd	r24, Y+23	; 0x17
    158e:	98 8d       	ldd	r25, Y+24	; 0x18
    1590:	89 2b       	or	r24, r25
    1592:	69 f7       	brne	.-38     	; 0x156e <pcf8574_init+0x144>
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <pcf8574_init+0x1ea>
    1596:	6b 89       	ldd	r22, Y+19	; 0x13
    1598:	7c 89       	ldd	r23, Y+20	; 0x14
    159a:	8d 89       	ldd	r24, Y+21	; 0x15
    159c:	9e 89       	ldd	r25, Y+22	; 0x16
    159e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	98 8f       	std	Y+24, r25	; 0x18
    15a8:	8f 8b       	std	Y+23, r24	; 0x17
    15aa:	8f 89       	ldd	r24, Y+23	; 0x17
    15ac:	98 8d       	ldd	r25, Y+24	; 0x18
    15ae:	9c 8f       	std	Y+28, r25	; 0x1c
    15b0:	8b 8f       	std	Y+27, r24	; 0x1b
    15b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <pcf8574_init+0x18c>
    15ba:	9c 8f       	std	Y+28, r25	; 0x1c
    15bc:	8b 8f       	std	Y+27, r24	; 0x1b
    15be:	2a c0       	rjmp	.+84     	; 0x1614 <pcf8574_init+0x1ea>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	53 e4       	ldi	r21, 0x43	; 67
    15c8:	6e 81       	ldd	r22, Y+6	; 0x06
    15ca:	7f 81       	ldd	r23, Y+7	; 0x07
    15cc:	88 85       	ldd	r24, Y+8	; 0x08
    15ce:	99 85       	ldd	r25, Y+9	; 0x09
    15d0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__gesf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	ac f4       	brge	.+42     	; 0x1602 <pcf8574_init+0x1d8>
    15d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    15da:	7b 85       	ldd	r23, Y+11	; 0x0b
    15dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15de:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 8f       	std	Y+30, r25	; 0x1e
    15ea:	8d 8f       	std	Y+29, r24	; 0x1d
    15ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15f0:	98 a3       	std	Y+32, r25	; 0x20
    15f2:	8f 8f       	std	Y+31, r24	; 0x1f
    15f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f6:	98 a1       	ldd	r25, Y+32	; 0x20
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <pcf8574_init+0x1ce>
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <pcf8574_init+0x1f6>
    1602:	6e 81       	ldd	r22, Y+6	; 0x06
    1604:	7f 81       	ldd	r23, Y+7	; 0x07
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8e 87       	std	Y+14, r24	; 0x0e
    1614:	8e 85       	ldd	r24, Y+14	; 0x0e
    1616:	89 a3       	std	Y+33, r24	; 0x21
    1618:	89 a1       	ldd	r24, Y+33	; 0x21
    161a:	8a 95       	dec	r24
    161c:	f1 f7       	brne	.-4      	; 0x161a <pcf8574_init+0x1f0>
    161e:	89 a3       	std	Y+33, r24	; 0x21
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	19 82       	std	Y+1, r1	; 0x01
    1624:	0a c0       	rjmp	.+20     	; 0x163a <pcf8574_init+0x210>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	87 5d       	subi	r24, 0xD7	; 215
    162e:	9d 4f       	sbci	r25, 0xFD	; 253
    1630:	fc 01       	movw	r30, r24
    1632:	10 82       	st	Z, r1
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	8f 5f       	subi	r24, 0xFF	; 255
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	88 30       	cpi	r24, 0x08	; 8
    163e:	98 f3       	brcs	.-26     	; 0x1626 <pcf8574_init+0x1fc>
    1640:	00 00       	nop
    1642:	a1 96       	adiw	r28, 0x21	; 33
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <pcf8574_getoutputpin>:
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	00 d0       	rcall	.+0      	; 0x165a <pcf8574_getoutputpin+0x6>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	6b 83       	std	Y+3, r22	; 0x03
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	88 30       	cpi	r24, 0x08	; 8
    166a:	c8 f4       	brcc	.+50     	; 0x169e <pcf8574_getoutputpin+0x4a>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 30       	cpi	r24, 0x08	; 8
    1670:	b0 f4       	brcc	.+44     	; 0x169e <pcf8574_getoutputpin+0x4a>
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	87 5d       	subi	r24, 0xD7	; 215
    167a:	9d 4f       	sbci	r25, 0xFD	; 253
    167c:	fc 01       	movw	r30, r24
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	08 2e       	mov	r0, r24
    1686:	00 0c       	add	r0, r0
    1688:	99 0b       	sbc	r25, r25
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	22 2f       	mov	r18, r18
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <pcf8574_getoutputpin+0x42>
    1692:	95 95       	asr	r25
    1694:	87 95       	ror	r24
    1696:	2a 95       	dec	r18
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <pcf8574_getoutputpin+0x3e>
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <pcf8574_setoutput>:
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	1f 92       	push	r1
    16b2:	1f 92       	push	r1
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	6a 83       	std	Y+2, r22	; 0x02
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	88 30       	cpi	r24, 0x08	; 8
    16c0:	a0 f4       	brcc	.+40     	; 0x16ea <pcf8574_setoutput+0x3e>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	87 5d       	subi	r24, 0xD7	; 215
    16ca:	9d 4f       	sbci	r25, 0xFD	; 253
    16cc:	2a 81       	ldd	r18, Y+2	; 0x02
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	89 5d       	subi	r24, 0xD9	; 217
    16d6:	88 0f       	add	r24, r24
    16d8:	0e 94 05 0c 	call	0x180a	; 0x180a <i2c_start>
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <i2c_write>
    16e2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <i2c_stop>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <pcf8574_setoutput+0x40>
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <pcf8574_setoutputpin+0x6>
    16fc:	1f 92       	push	r1
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	8a 83       	std	Y+2, r24	; 0x02
    1704:	6b 83       	std	Y+3, r22	; 0x03
    1706:	4c 83       	std	Y+4, r20	; 0x04
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	08 f0       	brcs	.+2      	; 0x1710 <pcf8574_setoutputpin+0x1a>
    170e:	40 c0       	rjmp	.+128    	; 0x1790 <pcf8574_setoutputpin+0x9a>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 30       	cpi	r24, 0x08	; 8
    1714:	e8 f5       	brcc	.+122    	; 0x1790 <pcf8574_setoutputpin+0x9a>
	    uint8_t b = 0;
    1716:	19 82       	std	Y+1, r1	; 0x01
	    b = pcf8574_pinstatus[deviceid];
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	87 5d       	subi	r24, 0xD7	; 215
    1720:	9d 4f       	sbci	r25, 0xFD	; 253
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	89 83       	std	Y+1, r24	; 0x01
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	88 23       	and	r24, r24
    172c:	71 f0       	breq	.+28     	; 0x174a <pcf8574_setoutputpin+0x54>
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <pcf8574_setoutputpin+0x48>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	2a 95       	dec	r18
    1740:	e2 f7       	brpl	.-8      	; 0x173a <pcf8574_setoutputpin+0x44>
    1742:	98 2f       	mov	r25, r24
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	89 2b       	or	r24, r25
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <pcf8574_setoutputpin+0x70>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 c0       	rjmp	.+4      	; 0x175a <pcf8574_setoutputpin+0x64>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	2a 95       	dec	r18
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <pcf8574_setoutputpin+0x60>
    175e:	98 2f       	mov	r25, r24
    1760:	90 95       	com	r25
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	89 23       	and	r24, r25
    1766:	89 83       	std	Y+1, r24	; 0x01
	    pcf8574_pinstatus[deviceid] = b;
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	87 5d       	subi	r24, 0xD7	; 215
    1770:	9d 4f       	sbci	r25, 0xFD	; 253
    1772:	29 81       	ldd	r18, Y+1	; 0x01
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	89 5d       	subi	r24, 0xD9	; 217
    177c:	88 0f       	add	r24, r24
    177e:	0e 94 05 0c 	call	0x180a	; 0x180a <i2c_start>
		i2c_write(b);
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <i2c_write>
		i2c_stop();
    1788:	0e 94 4b 0c 	call	0x1896	; 0x1896 <i2c_stop>
		return 0;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <pcf8574_setoutputpin+0x9c>
	}
	return -1;
    1790:	8f ef       	ldi	r24, 0xFF	; 255
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	1f 92       	push	r1
    17a6:	1f 92       	push	r1
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	6a 83       	std	Y+2, r22	; 0x02
	return pcf8574_setoutputpin(deviceid, pin, 1);
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	6a 81       	ldd	r22, Y+2	; 0x02
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <pcf8574_setoutputpin>
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	1f 92       	push	r1
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	6a 83       	std	Y+2, r22	; 0x02
	return pcf8574_setoutputpin(deviceid, pin, 0);
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	6a 81       	ldd	r22, Y+2	; 0x02
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <pcf8574_setoutputpin>
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	89 eb       	ldi	r24, 0xB9	; 185
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	10 82       	st	Z, r1
    17f8:	88 eb       	ldi	r24, 0xB8	; 184
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	20 ec       	ldi	r18, 0xC0	; 192
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
    1802:	00 00       	nop
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <i2c_start>:
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	1f 92       	push	r1
    1810:	1f 92       	push	r1
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8a 83       	std	Y+2, r24	; 0x02
    1818:	8c eb       	ldi	r24, 0xBC	; 188
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	24 ea       	ldi	r18, 0xA4	; 164
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18
    1822:	00 00       	nop
    1824:	8c eb       	ldi	r24, 0xBC	; 188
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	88 23       	and	r24, r24
    182e:	d4 f7       	brge	.-12     	; 0x1824 <i2c_start+0x1a>
    1830:	89 eb       	ldi	r24, 0xB9	; 185
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	88 7f       	andi	r24, 0xF8	; 248
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 30       	cpi	r24, 0x08	; 8
    1840:	29 f0       	breq	.+10     	; 0x184c <i2c_start+0x42>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	80 31       	cpi	r24, 0x10	; 16
    1846:	11 f0       	breq	.+4      	; 0x184c <i2c_start+0x42>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	20 c0       	rjmp	.+64     	; 0x188c <i2c_start+0x82>
    184c:	8b eb       	ldi	r24, 0xBB	; 187
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	2a 81       	ldd	r18, Y+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	20 83       	st	Z, r18
    1856:	8c eb       	ldi	r24, 0xBC	; 188
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	24 e8       	ldi	r18, 0x84	; 132
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
    1860:	00 00       	nop
    1862:	8c eb       	ldi	r24, 0xBC	; 188
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	88 23       	and	r24, r24
    186c:	d4 f7       	brge	.-12     	; 0x1862 <i2c_start+0x58>
    186e:	89 eb       	ldi	r24, 0xB9	; 185
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	fc 01       	movw	r30, r24
    1874:	80 81       	ld	r24, Z
    1876:	88 7f       	andi	r24, 0xF8	; 248
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	88 31       	cpi	r24, 0x18	; 24
    187e:	29 f0       	breq	.+10     	; 0x188a <i2c_start+0x80>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	80 34       	cpi	r24, 0x40	; 64
    1884:	11 f0       	breq	.+4      	; 0x188a <i2c_start+0x80>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	01 c0       	rjmp	.+2      	; 0x188c <i2c_start+0x82>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    189e:	8c eb       	ldi	r24, 0xBC	; 188
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	24 e9       	ldi	r18, 0x94	; 148
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    18a8:	00 00       	nop
    18aa:	8c eb       	ldi	r24, 0xBC	; 188
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	80 81       	ld	r24, Z
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	80 71       	andi	r24, 0x10	; 16
    18b8:	99 27       	eor	r25, r25
    18ba:	89 2b       	or	r24, r25
    18bc:	b1 f7       	brne	.-20     	; 0x18aa <i2c_stop+0x14>

}/* i2c_stop */
    18be:	00 00       	nop
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	1f 92       	push	r1
    18cc:	1f 92       	push	r1
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    18d4:	8b eb       	ldi	r24, 0xBB	; 187
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	2a 81       	ldd	r18, Y+2	; 0x02
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    18de:	8c eb       	ldi	r24, 0xBC	; 188
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	24 e8       	ldi	r18, 0x84	; 132
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    18e8:	00 00       	nop
    18ea:	8c eb       	ldi	r24, 0xBC	; 188
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	88 23       	and	r24, r24
    18f4:	d4 f7       	brge	.-12     	; 0x18ea <i2c_write+0x24>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    18f6:	89 eb       	ldi	r24, 0xB9	; 185
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	fc 01       	movw	r30, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	88 7f       	andi	r24, 0xF8	; 248
    1900:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 32       	cpi	r24, 0x28	; 40
    1906:	11 f0       	breq	.+4      	; 0x190c <i2c_write+0x46>
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	01 c0       	rjmp	.+2      	; 0x190e <i2c_write+0x48>
	return 0;
    190c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <__subsf3>:
    1918:	50 58       	subi	r21, 0x80	; 128

0000191a <__addsf3>:
    191a:	bb 27       	eor	r27, r27
    191c:	aa 27       	eor	r26, r26
    191e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__addsf3x>
    1922:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__fp_round>
    1926:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscA>
    192a:	38 f0       	brcs	.+14     	; 0x193a <__addsf3+0x20>
    192c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscB>
    1930:	20 f0       	brcs	.+8      	; 0x193a <__addsf3+0x20>
    1932:	39 f4       	brne	.+14     	; 0x1942 <__addsf3+0x28>
    1934:	9f 3f       	cpi	r25, 0xFF	; 255
    1936:	19 f4       	brne	.+6      	; 0x193e <__addsf3+0x24>
    1938:	26 f4       	brtc	.+8      	; 0x1942 <__addsf3+0x28>
    193a:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__fp_nan>
    193e:	0e f4       	brtc	.+2      	; 0x1942 <__addsf3+0x28>
    1940:	e0 95       	com	r30
    1942:	e7 fb       	bst	r30, 7
    1944:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>

00001948 <__addsf3x>:
    1948:	e9 2f       	mov	r30, r25
    194a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_split3>
    194e:	58 f3       	brcs	.-42     	; 0x1926 <__addsf3+0xc>
    1950:	ba 17       	cp	r27, r26
    1952:	62 07       	cpc	r22, r18
    1954:	73 07       	cpc	r23, r19
    1956:	84 07       	cpc	r24, r20
    1958:	95 07       	cpc	r25, r21
    195a:	20 f0       	brcs	.+8      	; 0x1964 <__addsf3x+0x1c>
    195c:	79 f4       	brne	.+30     	; 0x197c <__addsf3x+0x34>
    195e:	a6 f5       	brtc	.+104    	; 0x19c8 <__addsf3x+0x80>
    1960:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_zero>
    1964:	0e f4       	brtc	.+2      	; 0x1968 <__addsf3x+0x20>
    1966:	e0 95       	com	r30
    1968:	0b 2e       	mov	r0, r27
    196a:	ba 2f       	mov	r27, r26
    196c:	a0 2d       	mov	r26, r0
    196e:	0b 01       	movw	r0, r22
    1970:	b9 01       	movw	r22, r18
    1972:	90 01       	movw	r18, r0
    1974:	0c 01       	movw	r0, r24
    1976:	ca 01       	movw	r24, r20
    1978:	a0 01       	movw	r20, r0
    197a:	11 24       	eor	r1, r1
    197c:	ff 27       	eor	r31, r31
    197e:	59 1b       	sub	r21, r25
    1980:	99 f0       	breq	.+38     	; 0x19a8 <__addsf3x+0x60>
    1982:	59 3f       	cpi	r21, 0xF9	; 249
    1984:	50 f4       	brcc	.+20     	; 0x199a <__addsf3x+0x52>
    1986:	50 3e       	cpi	r21, 0xE0	; 224
    1988:	68 f1       	brcs	.+90     	; 0x19e4 <__addsf3x+0x9c>
    198a:	1a 16       	cp	r1, r26
    198c:	f0 40       	sbci	r31, 0x00	; 0
    198e:	a2 2f       	mov	r26, r18
    1990:	23 2f       	mov	r18, r19
    1992:	34 2f       	mov	r19, r20
    1994:	44 27       	eor	r20, r20
    1996:	58 5f       	subi	r21, 0xF8	; 248
    1998:	f3 cf       	rjmp	.-26     	; 0x1980 <__addsf3x+0x38>
    199a:	46 95       	lsr	r20
    199c:	37 95       	ror	r19
    199e:	27 95       	ror	r18
    19a0:	a7 95       	ror	r26
    19a2:	f0 40       	sbci	r31, 0x00	; 0
    19a4:	53 95       	inc	r21
    19a6:	c9 f7       	brne	.-14     	; 0x199a <__addsf3x+0x52>
    19a8:	7e f4       	brtc	.+30     	; 0x19c8 <__addsf3x+0x80>
    19aa:	1f 16       	cp	r1, r31
    19ac:	ba 0b       	sbc	r27, r26
    19ae:	62 0b       	sbc	r22, r18
    19b0:	73 0b       	sbc	r23, r19
    19b2:	84 0b       	sbc	r24, r20
    19b4:	ba f0       	brmi	.+46     	; 0x19e4 <__addsf3x+0x9c>
    19b6:	91 50       	subi	r25, 0x01	; 1
    19b8:	a1 f0       	breq	.+40     	; 0x19e2 <__addsf3x+0x9a>
    19ba:	ff 0f       	add	r31, r31
    19bc:	bb 1f       	adc	r27, r27
    19be:	66 1f       	adc	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	c2 f7       	brpl	.-16     	; 0x19b6 <__addsf3x+0x6e>
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <__addsf3x+0x9c>
    19c8:	ba 0f       	add	r27, r26
    19ca:	62 1f       	adc	r22, r18
    19cc:	73 1f       	adc	r23, r19
    19ce:	84 1f       	adc	r24, r20
    19d0:	48 f4       	brcc	.+18     	; 0x19e4 <__addsf3x+0x9c>
    19d2:	87 95       	ror	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	b7 95       	ror	r27
    19da:	f7 95       	ror	r31
    19dc:	9e 3f       	cpi	r25, 0xFE	; 254
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <__addsf3x+0x9a>
    19e0:	b0 cf       	rjmp	.-160    	; 0x1942 <__addsf3+0x28>
    19e2:	93 95       	inc	r25
    19e4:	88 0f       	add	r24, r24
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <__addsf3x+0xa2>
    19e8:	99 27       	eor	r25, r25
    19ea:	ee 0f       	add	r30, r30
    19ec:	97 95       	ror	r25
    19ee:	87 95       	ror	r24
    19f0:	08 95       	ret

000019f2 <__cmpsf2>:
    19f2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fp_cmp>
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <__cmpsf2+0x8>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret

000019fc <__divsf3>:
    19fc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divsf3x>
    1a00:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__fp_round>
    1a04:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscB>
    1a08:	58 f0       	brcs	.+22     	; 0x1a20 <__divsf3+0x24>
    1a0a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscA>
    1a0e:	40 f0       	brcs	.+16     	; 0x1a20 <__divsf3+0x24>
    1a10:	29 f4       	brne	.+10     	; 0x1a1c <__divsf3+0x20>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <__divsf3+0x24>
    1a16:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1a1a:	51 11       	cpse	r21, r1
    1a1c:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1a20:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__fp_nan>

00001a24 <__divsf3x>:
    1a24:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_split3>
    1a28:	68 f3       	brcs	.-38     	; 0x1a04 <__divsf3+0x8>

00001a2a <__divsf3_pse>:
    1a2a:	99 23       	and	r25, r25
    1a2c:	b1 f3       	breq	.-20     	; 0x1a1a <__divsf3+0x1e>
    1a2e:	55 23       	and	r21, r21
    1a30:	91 f3       	breq	.-28     	; 0x1a16 <__divsf3+0x1a>
    1a32:	95 1b       	sub	r25, r21
    1a34:	55 0b       	sbc	r21, r21
    1a36:	bb 27       	eor	r27, r27
    1a38:	aa 27       	eor	r26, r26
    1a3a:	62 17       	cp	r22, r18
    1a3c:	73 07       	cpc	r23, r19
    1a3e:	84 07       	cpc	r24, r20
    1a40:	38 f0       	brcs	.+14     	; 0x1a50 <__divsf3_pse+0x26>
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	44 1f       	adc	r20, r20
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	a9 f3       	breq	.-22     	; 0x1a3a <__divsf3_pse+0x10>
    1a50:	35 d0       	rcall	.+106    	; 0x1abc <__divsf3_pse+0x92>
    1a52:	0e 2e       	mov	r0, r30
    1a54:	3a f0       	brmi	.+14     	; 0x1a64 <__divsf3_pse+0x3a>
    1a56:	e0 e8       	ldi	r30, 0x80	; 128
    1a58:	32 d0       	rcall	.+100    	; 0x1abe <__divsf3_pse+0x94>
    1a5a:	91 50       	subi	r25, 0x01	; 1
    1a5c:	50 40       	sbci	r21, 0x00	; 0
    1a5e:	e6 95       	lsr	r30
    1a60:	00 1c       	adc	r0, r0
    1a62:	ca f7       	brpl	.-14     	; 0x1a56 <__divsf3_pse+0x2c>
    1a64:	2b d0       	rcall	.+86     	; 0x1abc <__divsf3_pse+0x92>
    1a66:	fe 2f       	mov	r31, r30
    1a68:	29 d0       	rcall	.+82     	; 0x1abc <__divsf3_pse+0x92>
    1a6a:	66 0f       	add	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	bb 1f       	adc	r27, r27
    1a72:	26 17       	cp	r18, r22
    1a74:	37 07       	cpc	r19, r23
    1a76:	48 07       	cpc	r20, r24
    1a78:	ab 07       	cpc	r26, r27
    1a7a:	b0 e8       	ldi	r27, 0x80	; 128
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <__divsf3_pse+0x56>
    1a7e:	bb 0b       	sbc	r27, r27
    1a80:	80 2d       	mov	r24, r0
    1a82:	bf 01       	movw	r22, r30
    1a84:	ff 27       	eor	r31, r31
    1a86:	93 58       	subi	r25, 0x83	; 131
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8a:	3a f0       	brmi	.+14     	; 0x1a9a <__divsf3_pse+0x70>
    1a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8e:	51 05       	cpc	r21, r1
    1a90:	78 f0       	brcs	.+30     	; 0x1ab0 <__divsf3_pse+0x86>
    1a92:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1a96:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9c:	e4 f3       	brlt	.-8      	; 0x1a96 <__divsf3_pse+0x6c>
    1a9e:	98 3e       	cpi	r25, 0xE8	; 232
    1aa0:	d4 f3       	brlt	.-12     	; 0x1a96 <__divsf3_pse+0x6c>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b7 95       	ror	r27
    1aaa:	f7 95       	ror	r31
    1aac:	9f 5f       	subi	r25, 0xFF	; 255
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__divsf3_pse+0x78>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret
    1abc:	e1 e0       	ldi	r30, 0x01	; 1
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	62 17       	cp	r22, r18
    1ac8:	73 07       	cpc	r23, r19
    1aca:	84 07       	cpc	r24, r20
    1acc:	ba 07       	cpc	r27, r26
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__divsf3_pse+0xae>
    1ad0:	62 1b       	sub	r22, r18
    1ad2:	73 0b       	sbc	r23, r19
    1ad4:	84 0b       	sbc	r24, r20
    1ad6:	ba 0b       	sbc	r27, r26
    1ad8:	ee 1f       	adc	r30, r30
    1ada:	88 f7       	brcc	.-30     	; 0x1abe <__divsf3_pse+0x94>
    1adc:	e0 95       	com	r30
    1ade:	08 95       	ret

00001ae0 <__fixsfsi>:
    1ae0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fixunssfsi>
    1ae4:	68 94       	set
    1ae6:	b1 11       	cpse	r27, r1
    1ae8:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1aec:	08 95       	ret

00001aee <__fixunssfsi>:
    1aee:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_splitA>
    1af2:	88 f0       	brcs	.+34     	; 0x1b16 <__fixunssfsi+0x28>
    1af4:	9f 57       	subi	r25, 0x7F	; 127
    1af6:	98 f0       	brcs	.+38     	; 0x1b1e <__fixunssfsi+0x30>
    1af8:	b9 2f       	mov	r27, r25
    1afa:	99 27       	eor	r25, r25
    1afc:	b7 51       	subi	r27, 0x17	; 23
    1afe:	b0 f0       	brcs	.+44     	; 0x1b2c <__fixunssfsi+0x3e>
    1b00:	e1 f0       	breq	.+56     	; 0x1b3a <__fixunssfsi+0x4c>
    1b02:	66 0f       	add	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	1a f0       	brmi	.+6      	; 0x1b12 <__fixunssfsi+0x24>
    1b0c:	ba 95       	dec	r27
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <__fixunssfsi+0x14>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <__fixunssfsi+0x4c>
    1b12:	b1 30       	cpi	r27, 0x01	; 1
    1b14:	91 f0       	breq	.+36     	; 0x1b3a <__fixunssfsi+0x4c>
    1b16:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fp_zero>
    1b1a:	b1 e0       	ldi	r27, 0x01	; 1
    1b1c:	08 95       	ret
    1b1e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_zero>
    1b22:	67 2f       	mov	r22, r23
    1b24:	78 2f       	mov	r23, r24
    1b26:	88 27       	eor	r24, r24
    1b28:	b8 5f       	subi	r27, 0xF8	; 248
    1b2a:	39 f0       	breq	.+14     	; 0x1b3a <__fixunssfsi+0x4c>
    1b2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b2e:	cc f3       	brlt	.-14     	; 0x1b22 <__fixunssfsi+0x34>
    1b30:	86 95       	lsr	r24
    1b32:	77 95       	ror	r23
    1b34:	67 95       	ror	r22
    1b36:	b3 95       	inc	r27
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <__fixunssfsi+0x42>
    1b3a:	3e f4       	brtc	.+14     	; 0x1b4a <__fixunssfsi+0x5c>
    1b3c:	90 95       	com	r25
    1b3e:	80 95       	com	r24
    1b40:	70 95       	com	r23
    1b42:	61 95       	neg	r22
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <__floatunsisf>:
    1b4c:	e8 94       	clt
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <__floatsisf+0x12>

00001b50 <__floatsisf>:
    1b50:	97 fb       	bst	r25, 7
    1b52:	3e f4       	brtc	.+14     	; 0x1b62 <__floatsisf+0x12>
    1b54:	90 95       	com	r25
    1b56:	80 95       	com	r24
    1b58:	70 95       	com	r23
    1b5a:	61 95       	neg	r22
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	99 23       	and	r25, r25
    1b64:	a9 f0       	breq	.+42     	; 0x1b90 <__floatsisf+0x40>
    1b66:	f9 2f       	mov	r31, r25
    1b68:	96 e9       	ldi	r25, 0x96	; 150
    1b6a:	bb 27       	eor	r27, r27
    1b6c:	93 95       	inc	r25
    1b6e:	f6 95       	lsr	r31
    1b70:	87 95       	ror	r24
    1b72:	77 95       	ror	r23
    1b74:	67 95       	ror	r22
    1b76:	b7 95       	ror	r27
    1b78:	f1 11       	cpse	r31, r1
    1b7a:	f8 cf       	rjmp	.-16     	; 0x1b6c <__floatsisf+0x1c>
    1b7c:	fa f4       	brpl	.+62     	; 0x1bbc <__floatsisf+0x6c>
    1b7e:	bb 0f       	add	r27, r27
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <__floatsisf+0x36>
    1b82:	60 ff       	sbrs	r22, 0
    1b84:	1b c0       	rjmp	.+54     	; 0x1bbc <__floatsisf+0x6c>
    1b86:	6f 5f       	subi	r22, 0xFF	; 255
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <__floatsisf+0x6c>
    1b90:	88 23       	and	r24, r24
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <__floatsisf+0x48>
    1b94:	96 e9       	ldi	r25, 0x96	; 150
    1b96:	11 c0       	rjmp	.+34     	; 0x1bba <__floatsisf+0x6a>
    1b98:	77 23       	and	r23, r23
    1b9a:	21 f0       	breq	.+8      	; 0x1ba4 <__floatsisf+0x54>
    1b9c:	9e e8       	ldi	r25, 0x8E	; 142
    1b9e:	87 2f       	mov	r24, r23
    1ba0:	76 2f       	mov	r23, r22
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <__floatsisf+0x5e>
    1ba4:	66 23       	and	r22, r22
    1ba6:	71 f0       	breq	.+28     	; 0x1bc4 <__floatsisf+0x74>
    1ba8:	96 e8       	ldi	r25, 0x86	; 134
    1baa:	86 2f       	mov	r24, r22
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	2a f0       	brmi	.+10     	; 0x1bbc <__floatsisf+0x6c>
    1bb2:	9a 95       	dec	r25
    1bb4:	66 0f       	add	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	da f7       	brpl	.-10     	; 0x1bb2 <__floatsisf+0x62>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	96 95       	lsr	r25
    1bc0:	87 95       	ror	r24
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	08 95       	ret

00001bc6 <__fp_cmp>:
    1bc6:	99 0f       	add	r25, r25
    1bc8:	00 08       	sbc	r0, r0
    1bca:	55 0f       	add	r21, r21
    1bcc:	aa 0b       	sbc	r26, r26
    1bce:	e0 e8       	ldi	r30, 0x80	; 128
    1bd0:	fe ef       	ldi	r31, 0xFE	; 254
    1bd2:	16 16       	cp	r1, r22
    1bd4:	17 06       	cpc	r1, r23
    1bd6:	e8 07       	cpc	r30, r24
    1bd8:	f9 07       	cpc	r31, r25
    1bda:	c0 f0       	brcs	.+48     	; 0x1c0c <__fp_cmp+0x46>
    1bdc:	12 16       	cp	r1, r18
    1bde:	13 06       	cpc	r1, r19
    1be0:	e4 07       	cpc	r30, r20
    1be2:	f5 07       	cpc	r31, r21
    1be4:	98 f0       	brcs	.+38     	; 0x1c0c <__fp_cmp+0x46>
    1be6:	62 1b       	sub	r22, r18
    1be8:	73 0b       	sbc	r23, r19
    1bea:	84 0b       	sbc	r24, r20
    1bec:	95 0b       	sbc	r25, r21
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <__fp_cmp+0x38>
    1bf0:	0a 26       	eor	r0, r26
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <__fp_cmp+0x46>
    1bf4:	23 2b       	or	r18, r19
    1bf6:	24 2b       	or	r18, r20
    1bf8:	25 2b       	or	r18, r21
    1bfa:	21 f4       	brne	.+8      	; 0x1c04 <__fp_cmp+0x3e>
    1bfc:	08 95       	ret
    1bfe:	0a 26       	eor	r0, r26
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <__fp_cmp+0x3e>
    1c02:	a1 40       	sbci	r26, 0x01	; 1
    1c04:	a6 95       	lsr	r26
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	81 1d       	adc	r24, r1
    1c0a:	81 1d       	adc	r24, r1
    1c0c:	08 95       	ret

00001c0e <__fp_inf>:
    1c0e:	97 f9       	bld	r25, 7
    1c10:	9f 67       	ori	r25, 0x7F	; 127
    1c12:	80 e8       	ldi	r24, 0x80	; 128
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	08 95       	ret

00001c1a <__fp_nan>:
    1c1a:	9f ef       	ldi	r25, 0xFF	; 255
    1c1c:	80 ec       	ldi	r24, 0xC0	; 192
    1c1e:	08 95       	ret

00001c20 <__fp_pscA>:
    1c20:	00 24       	eor	r0, r0
    1c22:	0a 94       	dec	r0
    1c24:	16 16       	cp	r1, r22
    1c26:	17 06       	cpc	r1, r23
    1c28:	18 06       	cpc	r1, r24
    1c2a:	09 06       	cpc	r0, r25
    1c2c:	08 95       	ret

00001c2e <__fp_pscB>:
    1c2e:	00 24       	eor	r0, r0
    1c30:	0a 94       	dec	r0
    1c32:	12 16       	cp	r1, r18
    1c34:	13 06       	cpc	r1, r19
    1c36:	14 06       	cpc	r1, r20
    1c38:	05 06       	cpc	r0, r21
    1c3a:	08 95       	ret

00001c3c <__fp_round>:
    1c3c:	09 2e       	mov	r0, r25
    1c3e:	03 94       	inc	r0
    1c40:	00 0c       	add	r0, r0
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__fp_round+0xc>
    1c44:	88 23       	and	r24, r24
    1c46:	52 f0       	brmi	.+20     	; 0x1c5c <__fp_round+0x20>
    1c48:	bb 0f       	add	r27, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <__fp_round+0x20>
    1c4c:	bf 2b       	or	r27, r31
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <__fp_round+0x18>
    1c50:	60 ff       	sbrs	r22, 0
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <__fp_round+0x20>
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__fp_split3>:
    1c5e:	57 fd       	sbrc	r21, 7
    1c60:	90 58       	subi	r25, 0x80	; 128
    1c62:	44 0f       	add	r20, r20
    1c64:	55 1f       	adc	r21, r21
    1c66:	59 f0       	breq	.+22     	; 0x1c7e <__fp_splitA+0x10>
    1c68:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <__fp_splitA+0x1a>
    1c6c:	47 95       	ror	r20

00001c6e <__fp_splitA>:
    1c6e:	88 0f       	add	r24, r24
    1c70:	97 fb       	bst	r25, 7
    1c72:	99 1f       	adc	r25, r25
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <__fp_splitA+0x20>
    1c76:	9f 3f       	cpi	r25, 0xFF	; 255
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <__fp_splitA+0x2a>
    1c7a:	87 95       	ror	r24
    1c7c:	08 95       	ret
    1c7e:	12 16       	cp	r1, r18
    1c80:	13 06       	cpc	r1, r19
    1c82:	14 06       	cpc	r1, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	f2 cf       	rjmp	.-28     	; 0x1c6c <__fp_split3+0xe>
    1c88:	46 95       	lsr	r20
    1c8a:	f1 df       	rcall	.-30     	; 0x1c6e <__fp_splitA>
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <__fp_splitA+0x30>
    1c8e:	16 16       	cp	r1, r22
    1c90:	17 06       	cpc	r1, r23
    1c92:	18 06       	cpc	r1, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	f1 cf       	rjmp	.-30     	; 0x1c7a <__fp_splitA+0xc>
    1c98:	86 95       	lsr	r24
    1c9a:	71 05       	cpc	r23, r1
    1c9c:	61 05       	cpc	r22, r1
    1c9e:	08 94       	sec
    1ca0:	08 95       	ret

00001ca2 <__fp_zero>:
    1ca2:	e8 94       	clt

00001ca4 <__fp_szero>:
    1ca4:	bb 27       	eor	r27, r27
    1ca6:	66 27       	eor	r22, r22
    1ca8:	77 27       	eor	r23, r23
    1caa:	cb 01       	movw	r24, r22
    1cac:	97 f9       	bld	r25, 7
    1cae:	08 95       	ret

00001cb0 <__gesf2>:
    1cb0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fp_cmp>
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <__gesf2+0x8>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	08 95       	ret

00001cba <__mulsf3>:
    1cba:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__mulsf3x>
    1cbe:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__fp_round>
    1cc2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscA>
    1cc6:	38 f0       	brcs	.+14     	; 0x1cd6 <__mulsf3+0x1c>
    1cc8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscB>
    1ccc:	20 f0       	brcs	.+8      	; 0x1cd6 <__mulsf3+0x1c>
    1cce:	95 23       	and	r25, r21
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <__mulsf3+0x1c>
    1cd2:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1cd6:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__fp_nan>
    1cda:	11 24       	eor	r1, r1
    1cdc:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>

00001ce0 <__mulsf3x>:
    1ce0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_split3>
    1ce4:	70 f3       	brcs	.-36     	; 0x1cc2 <__mulsf3+0x8>

00001ce6 <__mulsf3_pse>:
    1ce6:	95 9f       	mul	r25, r21
    1ce8:	c1 f3       	breq	.-16     	; 0x1cda <__mulsf3+0x20>
    1cea:	95 0f       	add	r25, r21
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	55 1f       	adc	r21, r21
    1cf0:	62 9f       	mul	r22, r18
    1cf2:	f0 01       	movw	r30, r0
    1cf4:	72 9f       	mul	r23, r18
    1cf6:	bb 27       	eor	r27, r27
    1cf8:	f0 0d       	add	r31, r0
    1cfa:	b1 1d       	adc	r27, r1
    1cfc:	63 9f       	mul	r22, r19
    1cfe:	aa 27       	eor	r26, r26
    1d00:	f0 0d       	add	r31, r0
    1d02:	b1 1d       	adc	r27, r1
    1d04:	aa 1f       	adc	r26, r26
    1d06:	64 9f       	mul	r22, r20
    1d08:	66 27       	eor	r22, r22
    1d0a:	b0 0d       	add	r27, r0
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	66 1f       	adc	r22, r22
    1d10:	82 9f       	mul	r24, r18
    1d12:	22 27       	eor	r18, r18
    1d14:	b0 0d       	add	r27, r0
    1d16:	a1 1d       	adc	r26, r1
    1d18:	62 1f       	adc	r22, r18
    1d1a:	73 9f       	mul	r23, r19
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	62 1f       	adc	r22, r18
    1d22:	83 9f       	mul	r24, r19
    1d24:	a0 0d       	add	r26, r0
    1d26:	61 1d       	adc	r22, r1
    1d28:	22 1f       	adc	r18, r18
    1d2a:	74 9f       	mul	r23, r20
    1d2c:	33 27       	eor	r19, r19
    1d2e:	a0 0d       	add	r26, r0
    1d30:	61 1d       	adc	r22, r1
    1d32:	23 1f       	adc	r18, r19
    1d34:	84 9f       	mul	r24, r20
    1d36:	60 0d       	add	r22, r0
    1d38:	21 1d       	adc	r18, r1
    1d3a:	82 2f       	mov	r24, r18
    1d3c:	76 2f       	mov	r23, r22
    1d3e:	6a 2f       	mov	r22, r26
    1d40:	11 24       	eor	r1, r1
    1d42:	9f 57       	subi	r25, 0x7F	; 127
    1d44:	50 40       	sbci	r21, 0x00	; 0
    1d46:	9a f0       	brmi	.+38     	; 0x1d6e <__mulsf3_pse+0x88>
    1d48:	f1 f0       	breq	.+60     	; 0x1d86 <__mulsf3_pse+0xa0>
    1d4a:	88 23       	and	r24, r24
    1d4c:	4a f0       	brmi	.+18     	; 0x1d60 <__mulsf3_pse+0x7a>
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	bb 1f       	adc	r27, r27
    1d54:	66 1f       	adc	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	91 50       	subi	r25, 0x01	; 1
    1d5c:	50 40       	sbci	r21, 0x00	; 0
    1d5e:	a9 f7       	brne	.-22     	; 0x1d4a <__mulsf3_pse+0x64>
    1d60:	9e 3f       	cpi	r25, 0xFE	; 254
    1d62:	51 05       	cpc	r21, r1
    1d64:	80 f0       	brcs	.+32     	; 0x1d86 <__mulsf3_pse+0xa0>
    1d66:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1d6a:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d70:	e4 f3       	brlt	.-8      	; 0x1d6a <__mulsf3_pse+0x84>
    1d72:	98 3e       	cpi	r25, 0xE8	; 232
    1d74:	d4 f3       	brlt	.-12     	; 0x1d6a <__mulsf3_pse+0x84>
    1d76:	86 95       	lsr	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b7 95       	ror	r27
    1d7e:	f7 95       	ror	r31
    1d80:	e7 95       	ror	r30
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	c1 f7       	brne	.-16     	; 0x1d76 <__mulsf3_pse+0x90>
    1d86:	fe 2b       	or	r31, r30
    1d88:	88 0f       	add	r24, r24
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	96 95       	lsr	r25
    1d8e:	87 95       	ror	r24
    1d90:	97 f9       	bld	r25, 7
    1d92:	08 95       	ret

00001d94 <sprintf>:
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	2e 97       	sbiw	r28, 0x0e	; 14
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	0e 89       	ldd	r16, Y+22	; 0x16
    1dae:	1f 89       	ldd	r17, Y+23	; 0x17
    1db0:	86 e0       	ldi	r24, 0x06	; 6
    1db2:	8c 83       	std	Y+4, r24	; 0x04
    1db4:	1a 83       	std	Y+2, r17	; 0x02
    1db6:	09 83       	std	Y+1, r16	; 0x01
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f e7       	ldi	r25, 0x7F	; 127
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	ae 01       	movw	r20, r28
    1dc2:	46 5e       	subi	r20, 0xE6	; 230
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	68 8d       	ldd	r22, Y+24	; 0x18
    1dc8:	79 8d       	ldd	r23, Y+25	; 0x19
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <vfprintf>
    1dd2:	ef 81       	ldd	r30, Y+7	; 0x07
    1dd4:	f8 85       	ldd	r31, Y+8	; 0x08
    1dd6:	e0 0f       	add	r30, r16
    1dd8:	f1 1f       	adc	r31, r17
    1dda:	10 82       	st	Z, r1
    1ddc:	2e 96       	adiw	r28, 0x0e	; 14
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	08 95       	ret

00001df2 <vfprintf>:
    1df2:	2f 92       	push	r2
    1df4:	3f 92       	push	r3
    1df6:	4f 92       	push	r4
    1df8:	5f 92       	push	r5
    1dfa:	6f 92       	push	r6
    1dfc:	7f 92       	push	r7
    1dfe:	8f 92       	push	r8
    1e00:	9f 92       	push	r9
    1e02:	af 92       	push	r10
    1e04:	bf 92       	push	r11
    1e06:	cf 92       	push	r12
    1e08:	df 92       	push	r13
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	2b 97       	sbiw	r28, 0x0b	; 11
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	6c 01       	movw	r12, r24
    1e28:	7b 01       	movw	r14, r22
    1e2a:	8a 01       	movw	r16, r20
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	17 82       	std	Z+7, r1	; 0x07
    1e30:	16 82       	std	Z+6, r1	; 0x06
    1e32:	83 81       	ldd	r24, Z+3	; 0x03
    1e34:	81 ff       	sbrs	r24, 1
    1e36:	cc c1       	rjmp	.+920    	; 0x21d0 <vfprintf+0x3de>
    1e38:	ce 01       	movw	r24, r28
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	3c 01       	movw	r6, r24
    1e3e:	f6 01       	movw	r30, r12
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	f7 01       	movw	r30, r14
    1e44:	93 fd       	sbrc	r25, 3
    1e46:	85 91       	lpm	r24, Z+
    1e48:	93 ff       	sbrs	r25, 3
    1e4a:	81 91       	ld	r24, Z+
    1e4c:	7f 01       	movw	r14, r30
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <vfprintf+0x62>
    1e52:	ba c1       	rjmp	.+884    	; 0x21c8 <vfprintf+0x3d6>
    1e54:	85 32       	cpi	r24, 0x25	; 37
    1e56:	39 f4       	brne	.+14     	; 0x1e66 <vfprintf+0x74>
    1e58:	93 fd       	sbrc	r25, 3
    1e5a:	85 91       	lpm	r24, Z+
    1e5c:	93 ff       	sbrs	r25, 3
    1e5e:	81 91       	ld	r24, Z+
    1e60:	7f 01       	movw	r14, r30
    1e62:	85 32       	cpi	r24, 0x25	; 37
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <vfprintf+0x7e>
    1e66:	b6 01       	movw	r22, r12
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1e6e:	e7 cf       	rjmp	.-50     	; 0x1e3e <vfprintf+0x4c>
    1e70:	91 2c       	mov	r9, r1
    1e72:	21 2c       	mov	r2, r1
    1e74:	31 2c       	mov	r3, r1
    1e76:	ff e1       	ldi	r31, 0x1F	; 31
    1e78:	f3 15       	cp	r31, r3
    1e7a:	d8 f0       	brcs	.+54     	; 0x1eb2 <vfprintf+0xc0>
    1e7c:	8b 32       	cpi	r24, 0x2B	; 43
    1e7e:	79 f0       	breq	.+30     	; 0x1e9e <vfprintf+0xac>
    1e80:	38 f4       	brcc	.+14     	; 0x1e90 <vfprintf+0x9e>
    1e82:	80 32       	cpi	r24, 0x20	; 32
    1e84:	79 f0       	breq	.+30     	; 0x1ea4 <vfprintf+0xb2>
    1e86:	83 32       	cpi	r24, 0x23	; 35
    1e88:	a1 f4       	brne	.+40     	; 0x1eb2 <vfprintf+0xc0>
    1e8a:	23 2d       	mov	r18, r3
    1e8c:	20 61       	ori	r18, 0x10	; 16
    1e8e:	1d c0       	rjmp	.+58     	; 0x1eca <vfprintf+0xd8>
    1e90:	8d 32       	cpi	r24, 0x2D	; 45
    1e92:	61 f0       	breq	.+24     	; 0x1eac <vfprintf+0xba>
    1e94:	80 33       	cpi	r24, 0x30	; 48
    1e96:	69 f4       	brne	.+26     	; 0x1eb2 <vfprintf+0xc0>
    1e98:	23 2d       	mov	r18, r3
    1e9a:	21 60       	ori	r18, 0x01	; 1
    1e9c:	16 c0       	rjmp	.+44     	; 0x1eca <vfprintf+0xd8>
    1e9e:	83 2d       	mov	r24, r3
    1ea0:	82 60       	ori	r24, 0x02	; 2
    1ea2:	38 2e       	mov	r3, r24
    1ea4:	e3 2d       	mov	r30, r3
    1ea6:	e4 60       	ori	r30, 0x04	; 4
    1ea8:	3e 2e       	mov	r3, r30
    1eaa:	2a c0       	rjmp	.+84     	; 0x1f00 <vfprintf+0x10e>
    1eac:	f3 2d       	mov	r31, r3
    1eae:	f8 60       	ori	r31, 0x08	; 8
    1eb0:	1d c0       	rjmp	.+58     	; 0x1eec <vfprintf+0xfa>
    1eb2:	37 fc       	sbrc	r3, 7
    1eb4:	2d c0       	rjmp	.+90     	; 0x1f10 <vfprintf+0x11e>
    1eb6:	20 ed       	ldi	r18, 0xD0	; 208
    1eb8:	28 0f       	add	r18, r24
    1eba:	2a 30       	cpi	r18, 0x0A	; 10
    1ebc:	40 f0       	brcs	.+16     	; 0x1ece <vfprintf+0xdc>
    1ebe:	8e 32       	cpi	r24, 0x2E	; 46
    1ec0:	b9 f4       	brne	.+46     	; 0x1ef0 <vfprintf+0xfe>
    1ec2:	36 fc       	sbrc	r3, 6
    1ec4:	81 c1       	rjmp	.+770    	; 0x21c8 <vfprintf+0x3d6>
    1ec6:	23 2d       	mov	r18, r3
    1ec8:	20 64       	ori	r18, 0x40	; 64
    1eca:	32 2e       	mov	r3, r18
    1ecc:	19 c0       	rjmp	.+50     	; 0x1f00 <vfprintf+0x10e>
    1ece:	36 fe       	sbrs	r3, 6
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <vfprintf+0xec>
    1ed2:	8a e0       	ldi	r24, 0x0A	; 10
    1ed4:	98 9e       	mul	r9, r24
    1ed6:	20 0d       	add	r18, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	92 2e       	mov	r9, r18
    1edc:	11 c0       	rjmp	.+34     	; 0x1f00 <vfprintf+0x10e>
    1ede:	ea e0       	ldi	r30, 0x0A	; 10
    1ee0:	2e 9e       	mul	r2, r30
    1ee2:	20 0d       	add	r18, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	22 2e       	mov	r2, r18
    1ee8:	f3 2d       	mov	r31, r3
    1eea:	f0 62       	ori	r31, 0x20	; 32
    1eec:	3f 2e       	mov	r3, r31
    1eee:	08 c0       	rjmp	.+16     	; 0x1f00 <vfprintf+0x10e>
    1ef0:	8c 36       	cpi	r24, 0x6C	; 108
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <vfprintf+0x10a>
    1ef4:	83 2d       	mov	r24, r3
    1ef6:	80 68       	ori	r24, 0x80	; 128
    1ef8:	38 2e       	mov	r3, r24
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <vfprintf+0x10e>
    1efc:	88 36       	cpi	r24, 0x68	; 104
    1efe:	41 f4       	brne	.+16     	; 0x1f10 <vfprintf+0x11e>
    1f00:	f7 01       	movw	r30, r14
    1f02:	93 fd       	sbrc	r25, 3
    1f04:	85 91       	lpm	r24, Z+
    1f06:	93 ff       	sbrs	r25, 3
    1f08:	81 91       	ld	r24, Z+
    1f0a:	7f 01       	movw	r14, r30
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	b3 cf       	rjmp	.-154    	; 0x1e76 <vfprintf+0x84>
    1f10:	98 2f       	mov	r25, r24
    1f12:	9f 7d       	andi	r25, 0xDF	; 223
    1f14:	95 54       	subi	r25, 0x45	; 69
    1f16:	93 30       	cpi	r25, 0x03	; 3
    1f18:	28 f4       	brcc	.+10     	; 0x1f24 <vfprintf+0x132>
    1f1a:	0c 5f       	subi	r16, 0xFC	; 252
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	9f e3       	ldi	r25, 0x3F	; 63
    1f20:	99 83       	std	Y+1, r25	; 0x01
    1f22:	0d c0       	rjmp	.+26     	; 0x1f3e <vfprintf+0x14c>
    1f24:	83 36       	cpi	r24, 0x63	; 99
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <vfprintf+0x142>
    1f28:	83 37       	cpi	r24, 0x73	; 115
    1f2a:	71 f0       	breq	.+28     	; 0x1f48 <vfprintf+0x156>
    1f2c:	83 35       	cpi	r24, 0x53	; 83
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <vfprintf+0x140>
    1f30:	59 c0       	rjmp	.+178    	; 0x1fe4 <vfprintf+0x1f2>
    1f32:	21 c0       	rjmp	.+66     	; 0x1f76 <vfprintf+0x184>
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 81       	ld	r24, Z
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	0e 5f       	subi	r16, 0xFE	; 254
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	88 24       	eor	r8, r8
    1f40:	83 94       	inc	r8
    1f42:	91 2c       	mov	r9, r1
    1f44:	53 01       	movw	r10, r6
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <vfprintf+0x17c>
    1f48:	28 01       	movw	r4, r16
    1f4a:	f2 e0       	ldi	r31, 0x02	; 2
    1f4c:	4f 0e       	add	r4, r31
    1f4e:	51 1c       	adc	r5, r1
    1f50:	f8 01       	movw	r30, r16
    1f52:	a0 80       	ld	r10, Z
    1f54:	b1 80       	ldd	r11, Z+1	; 0x01
    1f56:	36 fe       	sbrs	r3, 6
    1f58:	03 c0       	rjmp	.+6      	; 0x1f60 <vfprintf+0x16e>
    1f5a:	69 2d       	mov	r22, r9
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <vfprintf+0x172>
    1f60:	6f ef       	ldi	r22, 0xFF	; 255
    1f62:	7f ef       	ldi	r23, 0xFF	; 255
    1f64:	c5 01       	movw	r24, r10
    1f66:	0e 94 0e 11 	call	0x221c	; 0x221c <strnlen>
    1f6a:	4c 01       	movw	r8, r24
    1f6c:	82 01       	movw	r16, r4
    1f6e:	f3 2d       	mov	r31, r3
    1f70:	ff 77       	andi	r31, 0x7F	; 127
    1f72:	3f 2e       	mov	r3, r31
    1f74:	16 c0       	rjmp	.+44     	; 0x1fa2 <vfprintf+0x1b0>
    1f76:	28 01       	movw	r4, r16
    1f78:	22 e0       	ldi	r18, 0x02	; 2
    1f7a:	42 0e       	add	r4, r18
    1f7c:	51 1c       	adc	r5, r1
    1f7e:	f8 01       	movw	r30, r16
    1f80:	a0 80       	ld	r10, Z
    1f82:	b1 80       	ldd	r11, Z+1	; 0x01
    1f84:	36 fe       	sbrs	r3, 6
    1f86:	03 c0       	rjmp	.+6      	; 0x1f8e <vfprintf+0x19c>
    1f88:	69 2d       	mov	r22, r9
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <vfprintf+0x1a0>
    1f8e:	6f ef       	ldi	r22, 0xFF	; 255
    1f90:	7f ef       	ldi	r23, 0xFF	; 255
    1f92:	c5 01       	movw	r24, r10
    1f94:	0e 94 03 11 	call	0x2206	; 0x2206 <strnlen_P>
    1f98:	4c 01       	movw	r8, r24
    1f9a:	f3 2d       	mov	r31, r3
    1f9c:	f0 68       	ori	r31, 0x80	; 128
    1f9e:	3f 2e       	mov	r3, r31
    1fa0:	82 01       	movw	r16, r4
    1fa2:	33 fc       	sbrc	r3, 3
    1fa4:	1b c0       	rjmp	.+54     	; 0x1fdc <vfprintf+0x1ea>
    1fa6:	82 2d       	mov	r24, r2
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	88 16       	cp	r8, r24
    1fac:	99 06       	cpc	r9, r25
    1fae:	b0 f4       	brcc	.+44     	; 0x1fdc <vfprintf+0x1ea>
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1fba:	2a 94       	dec	r2
    1fbc:	f4 cf       	rjmp	.-24     	; 0x1fa6 <vfprintf+0x1b4>
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	37 fc       	sbrc	r3, 7
    1fc2:	85 91       	lpm	r24, Z+
    1fc4:	37 fe       	sbrs	r3, 7
    1fc6:	81 91       	ld	r24, Z+
    1fc8:	5f 01       	movw	r10, r30
    1fca:	b6 01       	movw	r22, r12
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1fd2:	21 10       	cpse	r2, r1
    1fd4:	2a 94       	dec	r2
    1fd6:	21 e0       	ldi	r18, 0x01	; 1
    1fd8:	82 1a       	sub	r8, r18
    1fda:	91 08       	sbc	r9, r1
    1fdc:	81 14       	cp	r8, r1
    1fde:	91 04       	cpc	r9, r1
    1fe0:	71 f7       	brne	.-36     	; 0x1fbe <vfprintf+0x1cc>
    1fe2:	e8 c0       	rjmp	.+464    	; 0x21b4 <vfprintf+0x3c2>
    1fe4:	84 36       	cpi	r24, 0x64	; 100
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <vfprintf+0x1fa>
    1fe8:	89 36       	cpi	r24, 0x69	; 105
    1fea:	41 f5       	brne	.+80     	; 0x203c <vfprintf+0x24a>
    1fec:	f8 01       	movw	r30, r16
    1fee:	37 fe       	sbrs	r3, 7
    1ff0:	07 c0       	rjmp	.+14     	; 0x2000 <vfprintf+0x20e>
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0c 5f       	subi	r16, 0xFC	; 252
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	08 c0       	rjmp	.+16     	; 0x2010 <vfprintf+0x21e>
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	07 2e       	mov	r0, r23
    2006:	00 0c       	add	r0, r0
    2008:	88 0b       	sbc	r24, r24
    200a:	99 0b       	sbc	r25, r25
    200c:	0e 5f       	subi	r16, 0xFE	; 254
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	f3 2d       	mov	r31, r3
    2012:	ff 76       	andi	r31, 0x6F	; 111
    2014:	3f 2e       	mov	r3, r31
    2016:	97 ff       	sbrs	r25, 7
    2018:	09 c0       	rjmp	.+18     	; 0x202c <vfprintf+0x23a>
    201a:	90 95       	com	r25
    201c:	80 95       	com	r24
    201e:	70 95       	com	r23
    2020:	61 95       	neg	r22
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	8f 4f       	sbci	r24, 0xFF	; 255
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	f0 68       	ori	r31, 0x80	; 128
    202a:	3f 2e       	mov	r3, r31
    202c:	2a e0       	ldi	r18, 0x0A	; 10
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a3 01       	movw	r20, r6
    2032:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    2036:	88 2e       	mov	r8, r24
    2038:	86 18       	sub	r8, r6
    203a:	45 c0       	rjmp	.+138    	; 0x20c6 <vfprintf+0x2d4>
    203c:	85 37       	cpi	r24, 0x75	; 117
    203e:	31 f4       	brne	.+12     	; 0x204c <vfprintf+0x25a>
    2040:	23 2d       	mov	r18, r3
    2042:	2f 7e       	andi	r18, 0xEF	; 239
    2044:	b2 2e       	mov	r11, r18
    2046:	2a e0       	ldi	r18, 0x0A	; 10
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	25 c0       	rjmp	.+74     	; 0x2096 <vfprintf+0x2a4>
    204c:	93 2d       	mov	r25, r3
    204e:	99 7f       	andi	r25, 0xF9	; 249
    2050:	b9 2e       	mov	r11, r25
    2052:	8f 36       	cpi	r24, 0x6F	; 111
    2054:	c1 f0       	breq	.+48     	; 0x2086 <vfprintf+0x294>
    2056:	18 f4       	brcc	.+6      	; 0x205e <vfprintf+0x26c>
    2058:	88 35       	cpi	r24, 0x58	; 88
    205a:	79 f0       	breq	.+30     	; 0x207a <vfprintf+0x288>
    205c:	b5 c0       	rjmp	.+362    	; 0x21c8 <vfprintf+0x3d6>
    205e:	80 37       	cpi	r24, 0x70	; 112
    2060:	19 f0       	breq	.+6      	; 0x2068 <vfprintf+0x276>
    2062:	88 37       	cpi	r24, 0x78	; 120
    2064:	21 f0       	breq	.+8      	; 0x206e <vfprintf+0x27c>
    2066:	b0 c0       	rjmp	.+352    	; 0x21c8 <vfprintf+0x3d6>
    2068:	e9 2f       	mov	r30, r25
    206a:	e0 61       	ori	r30, 0x10	; 16
    206c:	be 2e       	mov	r11, r30
    206e:	b4 fe       	sbrs	r11, 4
    2070:	0d c0       	rjmp	.+26     	; 0x208c <vfprintf+0x29a>
    2072:	fb 2d       	mov	r31, r11
    2074:	f4 60       	ori	r31, 0x04	; 4
    2076:	bf 2e       	mov	r11, r31
    2078:	09 c0       	rjmp	.+18     	; 0x208c <vfprintf+0x29a>
    207a:	34 fe       	sbrs	r3, 4
    207c:	0a c0       	rjmp	.+20     	; 0x2092 <vfprintf+0x2a0>
    207e:	29 2f       	mov	r18, r25
    2080:	26 60       	ori	r18, 0x06	; 6
    2082:	b2 2e       	mov	r11, r18
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <vfprintf+0x2a0>
    2086:	28 e0       	ldi	r18, 0x08	; 8
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	05 c0       	rjmp	.+10     	; 0x2096 <vfprintf+0x2a4>
    208c:	20 e1       	ldi	r18, 0x10	; 16
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x2a4>
    2092:	20 e1       	ldi	r18, 0x10	; 16
    2094:	32 e0       	ldi	r19, 0x02	; 2
    2096:	f8 01       	movw	r30, r16
    2098:	b7 fe       	sbrs	r11, 7
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <vfprintf+0x2b8>
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0c 5f       	subi	r16, 0xFC	; 252
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <vfprintf+0x2c4>
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 5f       	subi	r16, 0xFE	; 254
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	a3 01       	movw	r20, r6
    20b8:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    20bc:	88 2e       	mov	r8, r24
    20be:	86 18       	sub	r8, r6
    20c0:	fb 2d       	mov	r31, r11
    20c2:	ff 77       	andi	r31, 0x7F	; 127
    20c4:	3f 2e       	mov	r3, r31
    20c6:	36 fe       	sbrs	r3, 6
    20c8:	0d c0       	rjmp	.+26     	; 0x20e4 <vfprintf+0x2f2>
    20ca:	23 2d       	mov	r18, r3
    20cc:	2e 7f       	andi	r18, 0xFE	; 254
    20ce:	a2 2e       	mov	r10, r18
    20d0:	89 14       	cp	r8, r9
    20d2:	58 f4       	brcc	.+22     	; 0x20ea <vfprintf+0x2f8>
    20d4:	34 fe       	sbrs	r3, 4
    20d6:	0b c0       	rjmp	.+22     	; 0x20ee <vfprintf+0x2fc>
    20d8:	32 fc       	sbrc	r3, 2
    20da:	09 c0       	rjmp	.+18     	; 0x20ee <vfprintf+0x2fc>
    20dc:	83 2d       	mov	r24, r3
    20de:	8e 7e       	andi	r24, 0xEE	; 238
    20e0:	a8 2e       	mov	r10, r24
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <vfprintf+0x2fc>
    20e4:	b8 2c       	mov	r11, r8
    20e6:	a3 2c       	mov	r10, r3
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <vfprintf+0x2fe>
    20ea:	b8 2c       	mov	r11, r8
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <vfprintf+0x2fe>
    20ee:	b9 2c       	mov	r11, r9
    20f0:	a4 fe       	sbrs	r10, 4
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <vfprintf+0x320>
    20f4:	fe 01       	movw	r30, r28
    20f6:	e8 0d       	add	r30, r8
    20f8:	f1 1d       	adc	r31, r1
    20fa:	80 81       	ld	r24, Z
    20fc:	80 33       	cpi	r24, 0x30	; 48
    20fe:	21 f4       	brne	.+8      	; 0x2108 <vfprintf+0x316>
    2100:	9a 2d       	mov	r25, r10
    2102:	99 7e       	andi	r25, 0xE9	; 233
    2104:	a9 2e       	mov	r10, r25
    2106:	09 c0       	rjmp	.+18     	; 0x211a <vfprintf+0x328>
    2108:	a2 fe       	sbrs	r10, 2
    210a:	06 c0       	rjmp	.+12     	; 0x2118 <vfprintf+0x326>
    210c:	b3 94       	inc	r11
    210e:	b3 94       	inc	r11
    2110:	04 c0       	rjmp	.+8      	; 0x211a <vfprintf+0x328>
    2112:	8a 2d       	mov	r24, r10
    2114:	86 78       	andi	r24, 0x86	; 134
    2116:	09 f0       	breq	.+2      	; 0x211a <vfprintf+0x328>
    2118:	b3 94       	inc	r11
    211a:	a3 fc       	sbrc	r10, 3
    211c:	11 c0       	rjmp	.+34     	; 0x2140 <vfprintf+0x34e>
    211e:	a0 fe       	sbrs	r10, 0
    2120:	06 c0       	rjmp	.+12     	; 0x212e <vfprintf+0x33c>
    2122:	b2 14       	cp	r11, r2
    2124:	88 f4       	brcc	.+34     	; 0x2148 <vfprintf+0x356>
    2126:	28 0c       	add	r2, r8
    2128:	92 2c       	mov	r9, r2
    212a:	9b 18       	sub	r9, r11
    212c:	0e c0       	rjmp	.+28     	; 0x214a <vfprintf+0x358>
    212e:	b2 14       	cp	r11, r2
    2130:	60 f4       	brcc	.+24     	; 0x214a <vfprintf+0x358>
    2132:	b6 01       	movw	r22, r12
    2134:	80 e2       	ldi	r24, 0x20	; 32
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    213c:	b3 94       	inc	r11
    213e:	f7 cf       	rjmp	.-18     	; 0x212e <vfprintf+0x33c>
    2140:	b2 14       	cp	r11, r2
    2142:	18 f4       	brcc	.+6      	; 0x214a <vfprintf+0x358>
    2144:	2b 18       	sub	r2, r11
    2146:	02 c0       	rjmp	.+4      	; 0x214c <vfprintf+0x35a>
    2148:	98 2c       	mov	r9, r8
    214a:	21 2c       	mov	r2, r1
    214c:	a4 fe       	sbrs	r10, 4
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <vfprintf+0x37e>
    2150:	b6 01       	movw	r22, r12
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    215a:	a2 fe       	sbrs	r10, 2
    215c:	17 c0       	rjmp	.+46     	; 0x218c <vfprintf+0x39a>
    215e:	a1 fc       	sbrc	r10, 1
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <vfprintf+0x376>
    2162:	88 e7       	ldi	r24, 0x78	; 120
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 c0       	rjmp	.+4      	; 0x216c <vfprintf+0x37a>
    2168:	88 e5       	ldi	r24, 0x58	; 88
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	b6 01       	movw	r22, r12
    216e:	0c c0       	rjmp	.+24     	; 0x2188 <vfprintf+0x396>
    2170:	8a 2d       	mov	r24, r10
    2172:	86 78       	andi	r24, 0x86	; 134
    2174:	59 f0       	breq	.+22     	; 0x218c <vfprintf+0x39a>
    2176:	a1 fe       	sbrs	r10, 1
    2178:	02 c0       	rjmp	.+4      	; 0x217e <vfprintf+0x38c>
    217a:	8b e2       	ldi	r24, 0x2B	; 43
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <vfprintf+0x38e>
    217e:	80 e2       	ldi	r24, 0x20	; 32
    2180:	a7 fc       	sbrc	r10, 7
    2182:	8d e2       	ldi	r24, 0x2D	; 45
    2184:	b6 01       	movw	r22, r12
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    218c:	89 14       	cp	r8, r9
    218e:	38 f4       	brcc	.+14     	; 0x219e <vfprintf+0x3ac>
    2190:	b6 01       	movw	r22, r12
    2192:	80 e3       	ldi	r24, 0x30	; 48
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    219a:	9a 94       	dec	r9
    219c:	f7 cf       	rjmp	.-18     	; 0x218c <vfprintf+0x39a>
    219e:	8a 94       	dec	r8
    21a0:	f3 01       	movw	r30, r6
    21a2:	e8 0d       	add	r30, r8
    21a4:	f1 1d       	adc	r31, r1
    21a6:	80 81       	ld	r24, Z
    21a8:	b6 01       	movw	r22, r12
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    21b0:	81 10       	cpse	r8, r1
    21b2:	f5 cf       	rjmp	.-22     	; 0x219e <vfprintf+0x3ac>
    21b4:	22 20       	and	r2, r2
    21b6:	09 f4       	brne	.+2      	; 0x21ba <vfprintf+0x3c8>
    21b8:	42 ce       	rjmp	.-892    	; 0x1e3e <vfprintf+0x4c>
    21ba:	b6 01       	movw	r22, r12
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    21c4:	2a 94       	dec	r2
    21c6:	f6 cf       	rjmp	.-20     	; 0x21b4 <vfprintf+0x3c2>
    21c8:	f6 01       	movw	r30, r12
    21ca:	86 81       	ldd	r24, Z+6	; 0x06
    21cc:	97 81       	ldd	r25, Z+7	; 0x07
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0x3e2>
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	9f ef       	ldi	r25, 0xFF	; 255
    21d4:	2b 96       	adiw	r28, 0x0b	; 11
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	3f 90       	pop	r3
    2202:	2f 90       	pop	r2
    2204:	08 95       	ret

00002206 <strnlen_P>:
    2206:	fc 01       	movw	r30, r24
    2208:	05 90       	lpm	r0, Z+
    220a:	61 50       	subi	r22, 0x01	; 1
    220c:	70 40       	sbci	r23, 0x00	; 0
    220e:	01 10       	cpse	r0, r1
    2210:	d8 f7       	brcc	.-10     	; 0x2208 <strnlen_P+0x2>
    2212:	80 95       	com	r24
    2214:	90 95       	com	r25
    2216:	8e 0f       	add	r24, r30
    2218:	9f 1f       	adc	r25, r31
    221a:	08 95       	ret

0000221c <strnlen>:
    221c:	fc 01       	movw	r30, r24
    221e:	61 50       	subi	r22, 0x01	; 1
    2220:	70 40       	sbci	r23, 0x00	; 0
    2222:	01 90       	ld	r0, Z+
    2224:	01 10       	cpse	r0, r1
    2226:	d8 f7       	brcc	.-10     	; 0x221e <strnlen+0x2>
    2228:	80 95       	com	r24
    222a:	90 95       	com	r25
    222c:	8e 0f       	add	r24, r30
    222e:	9f 1f       	adc	r25, r31
    2230:	08 95       	ret

00002232 <fputc>:
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	fb 01       	movw	r30, r22
    223c:	23 81       	ldd	r18, Z+3	; 0x03
    223e:	21 fd       	sbrc	r18, 1
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <fputc+0x16>
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	9f ef       	ldi	r25, 0xFF	; 255
    2246:	2c c0       	rjmp	.+88     	; 0x22a0 <fputc+0x6e>
    2248:	22 ff       	sbrs	r18, 2
    224a:	16 c0       	rjmp	.+44     	; 0x2278 <fputc+0x46>
    224c:	46 81       	ldd	r20, Z+6	; 0x06
    224e:	57 81       	ldd	r21, Z+7	; 0x07
    2250:	24 81       	ldd	r18, Z+4	; 0x04
    2252:	35 81       	ldd	r19, Z+5	; 0x05
    2254:	42 17       	cp	r20, r18
    2256:	53 07       	cpc	r21, r19
    2258:	44 f4       	brge	.+16     	; 0x226a <fputc+0x38>
    225a:	a0 81       	ld	r26, Z
    225c:	b1 81       	ldd	r27, Z+1	; 0x01
    225e:	9d 01       	movw	r18, r26
    2260:	2f 5f       	subi	r18, 0xFF	; 255
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	31 83       	std	Z+1, r19	; 0x01
    2266:	20 83       	st	Z, r18
    2268:	8c 93       	st	X, r24
    226a:	26 81       	ldd	r18, Z+6	; 0x06
    226c:	37 81       	ldd	r19, Z+7	; 0x07
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	37 83       	std	Z+7, r19	; 0x07
    2274:	26 83       	std	Z+6, r18	; 0x06
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <fputc+0x6e>
    2278:	8b 01       	movw	r16, r22
    227a:	ec 01       	movw	r28, r24
    227c:	fb 01       	movw	r30, r22
    227e:	00 84       	ldd	r0, Z+8	; 0x08
    2280:	f1 85       	ldd	r31, Z+9	; 0x09
    2282:	e0 2d       	mov	r30, r0
    2284:	19 95       	eicall
    2286:	89 2b       	or	r24, r25
    2288:	e1 f6       	brne	.-72     	; 0x2242 <fputc+0x10>
    228a:	d8 01       	movw	r26, r16
    228c:	16 96       	adiw	r26, 0x06	; 6
    228e:	8d 91       	ld	r24, X+
    2290:	9c 91       	ld	r25, X
    2292:	17 97       	sbiw	r26, 0x07	; 7
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	17 96       	adiw	r26, 0x07	; 7
    2298:	9c 93       	st	X, r25
    229a:	8e 93       	st	-X, r24
    229c:	16 97       	sbiw	r26, 0x06	; 6
    229e:	ce 01       	movw	r24, r28
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	08 95       	ret

000022aa <__ultoa_invert>:
    22aa:	fa 01       	movw	r30, r20
    22ac:	aa 27       	eor	r26, r26
    22ae:	28 30       	cpi	r18, 0x08	; 8
    22b0:	51 f1       	breq	.+84     	; 0x2306 <__ultoa_invert+0x5c>
    22b2:	20 31       	cpi	r18, 0x10	; 16
    22b4:	81 f1       	breq	.+96     	; 0x2316 <__ultoa_invert+0x6c>
    22b6:	e8 94       	clt
    22b8:	6f 93       	push	r22
    22ba:	6e 7f       	andi	r22, 0xFE	; 254
    22bc:	6e 5f       	subi	r22, 0xFE	; 254
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	af 4f       	sbci	r26, 0xFF	; 255
    22c6:	b1 e0       	ldi	r27, 0x01	; 1
    22c8:	3e d0       	rcall	.+124    	; 0x2346 <__ultoa_invert+0x9c>
    22ca:	b4 e0       	ldi	r27, 0x04	; 4
    22cc:	3c d0       	rcall	.+120    	; 0x2346 <__ultoa_invert+0x9c>
    22ce:	67 0f       	add	r22, r23
    22d0:	78 1f       	adc	r23, r24
    22d2:	89 1f       	adc	r24, r25
    22d4:	9a 1f       	adc	r25, r26
    22d6:	a1 1d       	adc	r26, r1
    22d8:	68 0f       	add	r22, r24
    22da:	79 1f       	adc	r23, r25
    22dc:	8a 1f       	adc	r24, r26
    22de:	91 1d       	adc	r25, r1
    22e0:	a1 1d       	adc	r26, r1
    22e2:	6a 0f       	add	r22, r26
    22e4:	71 1d       	adc	r23, r1
    22e6:	81 1d       	adc	r24, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	a1 1d       	adc	r26, r1
    22ec:	20 d0       	rcall	.+64     	; 0x232e <__ultoa_invert+0x84>
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <__ultoa_invert+0x48>
    22f0:	68 94       	set
    22f2:	3f 91       	pop	r19
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	26 9f       	mul	r18, r22
    22f8:	11 24       	eor	r1, r1
    22fa:	30 19       	sub	r19, r0
    22fc:	30 5d       	subi	r19, 0xD0	; 208
    22fe:	31 93       	st	Z+, r19
    2300:	de f6       	brtc	.-74     	; 0x22b8 <__ultoa_invert+0xe>
    2302:	cf 01       	movw	r24, r30
    2304:	08 95       	ret
    2306:	46 2f       	mov	r20, r22
    2308:	47 70       	andi	r20, 0x07	; 7
    230a:	40 5d       	subi	r20, 0xD0	; 208
    230c:	41 93       	st	Z+, r20
    230e:	b3 e0       	ldi	r27, 0x03	; 3
    2310:	0f d0       	rcall	.+30     	; 0x2330 <__ultoa_invert+0x86>
    2312:	c9 f7       	brne	.-14     	; 0x2306 <__ultoa_invert+0x5c>
    2314:	f6 cf       	rjmp	.-20     	; 0x2302 <__ultoa_invert+0x58>
    2316:	46 2f       	mov	r20, r22
    2318:	4f 70       	andi	r20, 0x0F	; 15
    231a:	40 5d       	subi	r20, 0xD0	; 208
    231c:	4a 33       	cpi	r20, 0x3A	; 58
    231e:	18 f0       	brcs	.+6      	; 0x2326 <__ultoa_invert+0x7c>
    2320:	49 5d       	subi	r20, 0xD9	; 217
    2322:	31 fd       	sbrc	r19, 1
    2324:	40 52       	subi	r20, 0x20	; 32
    2326:	41 93       	st	Z+, r20
    2328:	02 d0       	rcall	.+4      	; 0x232e <__ultoa_invert+0x84>
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__ultoa_invert+0x6c>
    232c:	ea cf       	rjmp	.-44     	; 0x2302 <__ultoa_invert+0x58>
    232e:	b4 e0       	ldi	r27, 0x04	; 4
    2330:	a6 95       	lsr	r26
    2332:	97 95       	ror	r25
    2334:	87 95       	ror	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	ba 95       	dec	r27
    233c:	c9 f7       	brne	.-14     	; 0x2330 <__ultoa_invert+0x86>
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 05       	cpc	r22, r1
    2342:	71 05       	cpc	r23, r1
    2344:	08 95       	ret
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	0a 2e       	mov	r0, r26
    234c:	06 94       	lsr	r0
    234e:	57 95       	ror	r21
    2350:	47 95       	ror	r20
    2352:	37 95       	ror	r19
    2354:	27 95       	ror	r18
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__ultoa_invert+0xa2>
    235a:	62 0f       	add	r22, r18
    235c:	73 1f       	adc	r23, r19
    235e:	84 1f       	adc	r24, r20
    2360:	95 1f       	adc	r25, r21
    2362:	a0 1d       	adc	r26, r0
    2364:	08 95       	ret

00002366 <_exit>:
    2366:	f8 94       	cli

00002368 <__stop_program>:
    2368:	ff cf       	rjmp	.-2      	; 0x2368 <__stop_program>
