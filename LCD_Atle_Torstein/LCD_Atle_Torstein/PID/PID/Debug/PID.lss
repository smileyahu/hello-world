
PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800200  00800200  00000b98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6b  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  00001ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000488  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038a  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000036ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_17>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_29>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 35       	cpi	r26, 0x54	; 84
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 82 01 	call	0x304	; 0x304 <main>
 108:	0c 94 90 05 	jmp	0xb20	; 0xb20 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <UpdatePID>:
	double iState; // Integrator state
	double iMax, iMin; // Maximum and minimum allowable integrator state
	double iGain, pGain, dGain;// integral gain, proportional gain, derivative gain
}PID;
double UpdatePID(PID * pid, double error, double position) //PID controller.
{
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	66 97       	sbiw	r28, 0x16	; 22
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	9e 87       	std	Y+14, r25	; 0x0e
 132:	8d 87       	std	Y+13, r24	; 0x0d
 134:	4f 87       	std	Y+15, r20	; 0x0f
 136:	58 8b       	std	Y+16, r21	; 0x10
 138:	69 8b       	std	Y+17, r22	; 0x11
 13a:	7a 8b       	std	Y+18, r23	; 0x12
 13c:	0b 8b       	std	Y+19, r16	; 0x13
 13e:	1c 8b       	std	Y+20, r17	; 0x14
 140:	2d 8b       	std	Y+21, r18	; 0x15
 142:	3e 8b       	std	Y+22, r19	; 0x16
	double pTerm, dTerm, iTerm;

	// calculate the proportional term
	pTerm = pid->pGain * error;
 144:	8d 85       	ldd	r24, Y+13	; 0x0d
 146:	9e 85       	ldd	r25, Y+14	; 0x0e
 148:	fc 01       	movw	r30, r24
 14a:	84 89       	ldd	r24, Z+20	; 0x14
 14c:	95 89       	ldd	r25, Z+21	; 0x15
 14e:	a6 89       	ldd	r26, Z+22	; 0x16
 150:	b7 89       	ldd	r27, Z+23	; 0x17
 152:	2f 85       	ldd	r18, Y+15	; 0x0f
 154:	38 89       	ldd	r19, Y+16	; 0x10
 156:	49 89       	ldd	r20, Y+17	; 0x11
 158:	5a 89       	ldd	r21, Y+18	; 0x12
 15a:	bc 01       	movw	r22, r24
 15c:	cd 01       	movw	r24, r26
 15e:	0e 94 23 05 	call	0xa46	; 0xa46 <__mulsf3>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	ab 83       	std	Y+3, r26	; 0x03
 16c:	bc 83       	std	Y+4, r27	; 0x04
	
	// calculate the integral state with appropriate limiting and calculates the integral term
	pid->iState += error;
 16e:	8d 85       	ldd	r24, Y+13	; 0x0d
 170:	9e 85       	ldd	r25, Y+14	; 0x0e
 172:	fc 01       	movw	r30, r24
 174:	84 81       	ldd	r24, Z+4	; 0x04
 176:	95 81       	ldd	r25, Z+5	; 0x05
 178:	a6 81       	ldd	r26, Z+6	; 0x06
 17a:	b7 81       	ldd	r27, Z+7	; 0x07
 17c:	2f 85       	ldd	r18, Y+15	; 0x0f
 17e:	38 89       	ldd	r19, Y+16	; 0x10
 180:	49 89       	ldd	r20, Y+17	; 0x11
 182:	5a 89       	ldd	r21, Y+18	; 0x12
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	0e 94 cc 03 	call	0x798	; 0x798 <__addsf3>
 18c:	dc 01       	movw	r26, r24
 18e:	cb 01       	movw	r24, r22
 190:	2d 85       	ldd	r18, Y+13	; 0x0d
 192:	3e 85       	ldd	r19, Y+14	; 0x0e
 194:	f9 01       	movw	r30, r18
 196:	84 83       	std	Z+4, r24	; 0x04
 198:	95 83       	std	Z+5, r25	; 0x05
 19a:	a6 83       	std	Z+6, r26	; 0x06
 19c:	b7 83       	std	Z+7, r27	; 0x07
	if (pid->iState > pid->iMax)pid->iState = pid->iMax;
 19e:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a2:	fc 01       	movw	r30, r24
 1a4:	84 81       	ldd	r24, Z+4	; 0x04
 1a6:	95 81       	ldd	r25, Z+5	; 0x05
 1a8:	a6 81       	ldd	r26, Z+6	; 0x06
 1aa:	b7 81       	ldd	r27, Z+7	; 0x07
 1ac:	2d 85       	ldd	r18, Y+13	; 0x0d
 1ae:	3e 85       	ldd	r19, Y+14	; 0x0e
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 85       	ldd	r18, Z+8	; 0x08
 1b4:	31 85       	ldd	r19, Z+9	; 0x09
 1b6:	42 85       	ldd	r20, Z+10	; 0x0a
 1b8:	53 85       	ldd	r21, Z+11	; 0x0b
 1ba:	bc 01       	movw	r22, r24
 1bc:	cd 01       	movw	r24, r26
 1be:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__gesf2>
 1c2:	18 16       	cp	r1, r24
 1c4:	7c f4       	brge	.+30     	; 0x1e4 <UpdatePID+0xd4>
 1c6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1c8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 85       	ldd	r24, Z+8	; 0x08
 1ce:	91 85       	ldd	r25, Z+9	; 0x09
 1d0:	a2 85       	ldd	r26, Z+10	; 0x0a
 1d2:	b3 85       	ldd	r27, Z+11	; 0x0b
 1d4:	2d 85       	ldd	r18, Y+13	; 0x0d
 1d6:	3e 85       	ldd	r19, Y+14	; 0x0e
 1d8:	f9 01       	movw	r30, r18
 1da:	84 83       	std	Z+4, r24	; 0x04
 1dc:	95 83       	std	Z+5, r25	; 0x05
 1de:	a6 83       	std	Z+6, r26	; 0x06
 1e0:	b7 83       	std	Z+7, r27	; 0x07
 1e2:	22 c0       	rjmp	.+68     	; 0x228 <UpdatePID+0x118>
	else if (pid->iState < pid->iMin) pid->iState = pid->iMin;
 1e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1e6:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e8:	fc 01       	movw	r30, r24
 1ea:	84 81       	ldd	r24, Z+4	; 0x04
 1ec:	95 81       	ldd	r25, Z+5	; 0x05
 1ee:	a6 81       	ldd	r26, Z+6	; 0x06
 1f0:	b7 81       	ldd	r27, Z+7	; 0x07
 1f2:	2d 85       	ldd	r18, Y+13	; 0x0d
 1f4:	3e 85       	ldd	r19, Y+14	; 0x0e
 1f6:	f9 01       	movw	r30, r18
 1f8:	24 85       	ldd	r18, Z+12	; 0x0c
 1fa:	35 85       	ldd	r19, Z+13	; 0x0d
 1fc:	46 85       	ldd	r20, Z+14	; 0x0e
 1fe:	57 85       	ldd	r21, Z+15	; 0x0f
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 38 04 	call	0x870	; 0x870 <__cmpsf2>
 208:	88 23       	and	r24, r24
 20a:	74 f4       	brge	.+28     	; 0x228 <UpdatePID+0x118>
 20c:	8d 85       	ldd	r24, Y+13	; 0x0d
 20e:	9e 85       	ldd	r25, Y+14	; 0x0e
 210:	fc 01       	movw	r30, r24
 212:	84 85       	ldd	r24, Z+12	; 0x0c
 214:	95 85       	ldd	r25, Z+13	; 0x0d
 216:	a6 85       	ldd	r26, Z+14	; 0x0e
 218:	b7 85       	ldd	r27, Z+15	; 0x0f
 21a:	2d 85       	ldd	r18, Y+13	; 0x0d
 21c:	3e 85       	ldd	r19, Y+14	; 0x0e
 21e:	f9 01       	movw	r30, r18
 220:	84 83       	std	Z+4, r24	; 0x04
 222:	95 83       	std	Z+5, r25	; 0x05
 224:	a6 83       	std	Z+6, r26	; 0x06
 226:	b7 83       	std	Z+7, r27	; 0x07
	iTerm = pid->iGain * pid->iState;
 228:	8d 85       	ldd	r24, Y+13	; 0x0d
 22a:	9e 85       	ldd	r25, Y+14	; 0x0e
 22c:	fc 01       	movw	r30, r24
 22e:	80 89       	ldd	r24, Z+16	; 0x10
 230:	91 89       	ldd	r25, Z+17	; 0x11
 232:	a2 89       	ldd	r26, Z+18	; 0x12
 234:	b3 89       	ldd	r27, Z+19	; 0x13
 236:	2d 85       	ldd	r18, Y+13	; 0x0d
 238:	3e 85       	ldd	r19, Y+14	; 0x0e
 23a:	f9 01       	movw	r30, r18
 23c:	24 81       	ldd	r18, Z+4	; 0x04
 23e:	35 81       	ldd	r19, Z+5	; 0x05
 240:	46 81       	ldd	r20, Z+6	; 0x06
 242:	57 81       	ldd	r21, Z+7	; 0x07
 244:	bc 01       	movw	r22, r24
 246:	cd 01       	movw	r24, r26
 248:	0e 94 23 05 	call	0xa46	; 0xa46 <__mulsf3>
 24c:	dc 01       	movw	r26, r24
 24e:	cb 01       	movw	r24, r22
 250:	8d 83       	std	Y+5, r24	; 0x05
 252:	9e 83       	std	Y+6, r25	; 0x06
 254:	af 83       	std	Y+7, r26	; 0x07
 256:	b8 87       	std	Y+8, r27	; 0x08
	
	// calculates the derivate term and stores the state
	dTerm = pid->dGain * (position - pid->dState);
 258:	8d 85       	ldd	r24, Y+13	; 0x0d
 25a:	9e 85       	ldd	r25, Y+14	; 0x0e
 25c:	fc 01       	movw	r30, r24
 25e:	c0 8c       	ldd	r12, Z+24	; 0x18
 260:	d1 8c       	ldd	r13, Z+25	; 0x19
 262:	e2 8c       	ldd	r14, Z+26	; 0x1a
 264:	f3 8c       	ldd	r15, Z+27	; 0x1b
 266:	8d 85       	ldd	r24, Y+13	; 0x0d
 268:	9e 85       	ldd	r25, Y+14	; 0x0e
 26a:	fc 01       	movw	r30, r24
 26c:	80 81       	ld	r24, Z
 26e:	91 81       	ldd	r25, Z+1	; 0x01
 270:	a2 81       	ldd	r26, Z+2	; 0x02
 272:	b3 81       	ldd	r27, Z+3	; 0x03
 274:	9c 01       	movw	r18, r24
 276:	ad 01       	movw	r20, r26
 278:	6b 89       	ldd	r22, Y+19	; 0x13
 27a:	7c 89       	ldd	r23, Y+20	; 0x14
 27c:	8d 89       	ldd	r24, Y+21	; 0x15
 27e:	9e 89       	ldd	r25, Y+22	; 0x16
 280:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	9c 01       	movw	r18, r24
 28a:	ad 01       	movw	r20, r26
 28c:	c7 01       	movw	r24, r14
 28e:	b6 01       	movw	r22, r12
 290:	0e 94 23 05 	call	0xa46	; 0xa46 <__mulsf3>
 294:	dc 01       	movw	r26, r24
 296:	cb 01       	movw	r24, r22
 298:	89 87       	std	Y+9, r24	; 0x09
 29a:	9a 87       	std	Y+10, r25	; 0x0a
 29c:	ab 87       	std	Y+11, r26	; 0x0b
 29e:	bc 87       	std	Y+12, r27	; 0x0c
	pid->dState = position;
 2a0:	2d 85       	ldd	r18, Y+13	; 0x0d
 2a2:	3e 85       	ldd	r19, Y+14	; 0x0e
 2a4:	8b 89       	ldd	r24, Y+19	; 0x13
 2a6:	9c 89       	ldd	r25, Y+20	; 0x14
 2a8:	ad 89       	ldd	r26, Y+21	; 0x15
 2aa:	be 89       	ldd	r27, Y+22	; 0x16
 2ac:	f9 01       	movw	r30, r18
 2ae:	80 83       	st	Z, r24
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	a2 83       	std	Z+2, r26	; 0x02
 2b4:	b3 83       	std	Z+3, r27	; 0x03

	// returns result
	return pTerm + iTerm - dTerm;
 2b6:	2d 81       	ldd	r18, Y+5	; 0x05
 2b8:	3e 81       	ldd	r19, Y+6	; 0x06
 2ba:	4f 81       	ldd	r20, Y+7	; 0x07
 2bc:	58 85       	ldd	r21, Y+8	; 0x08
 2be:	69 81       	ldd	r22, Y+1	; 0x01
 2c0:	7a 81       	ldd	r23, Y+2	; 0x02
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	0e 94 cc 03 	call	0x798	; 0x798 <__addsf3>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	29 85       	ldd	r18, Y+9	; 0x09
 2d0:	3a 85       	ldd	r19, Y+10	; 0x0a
 2d2:	4b 85       	ldd	r20, Y+11	; 0x0b
 2d4:	5c 85       	ldd	r21, Y+12	; 0x0c
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 2de:	dc 01       	movw	r26, r24
 2e0:	cb 01       	movw	r24, r22
}
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	66 96       	adiw	r28, 0x16	; 22
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <main>:
//End of example code

int main(void)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	InitialiseGeneral();
 30c:	0e 94 8d 01 	call	0x31a	; 0x31a <InitialiseGeneral>
	InitialiseTimer1();
 310:	0e 94 34 02 	call	0x468	; 0x468 <InitialiseTimer1>
	InitializeADC();
 314:	0e 94 60 02 	call	0x4c0	; 0x4c0 <InitializeADC>

	while (1) { }
 318:	ff cf       	rjmp	.-2      	; 0x318 <main+0x14>

0000031a <InitialiseGeneral>:
}

void InitialiseGeneral() //Stuff
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
	//Port declaration goes here
	DDRA = 0xFF;			// Configure PortA direction for Output
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
	PORTA = 0xFF;			// Set all LEDs initially off
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
	
	//temp declaration
	LevelSetpoint = 50;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	a8 e4       	ldi	r26, 0x48	; 72
 33c:	b2 e4       	ldi	r27, 0x42	; 66
 33e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <LevelSetpoint>
 342:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <LevelSetpoint+0x1>
 346:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <LevelSetpoint+0x2>
 34a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <LevelSetpoint+0x3>

	//Temp. The position values will come from analog inputs
	FlowPosition = 10;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	a0 e2       	ldi	r26, 0x20	; 32
 354:	b1 e4       	ldi	r27, 0x41	; 65
 356:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <FlowPosition>
 35a:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <FlowPosition+0x1>
 35e:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <FlowPosition+0x2>
 362:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <FlowPosition+0x3>
	LevelPosition = 10;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a0 e2       	ldi	r26, 0x20	; 32
 36c:	b1 e4       	ldi	r27, 0x41	; 65
 36e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <LevelPosition>
 372:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <LevelPosition+0x1>
 376:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <LevelPosition+0x2>
 37a:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <LevelPosition+0x3>
	
	//Initialize values to flow controller
	FlowController.iGain = 10;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	a0 e2       	ldi	r26, 0x20	; 32
 384:	b1 e4       	ldi	r27, 0x41	; 65
 386:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_edata+0x10>
 38a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <_edata+0x11>
 38e:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <_edata+0x12>
 392:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <_edata+0x13>
	FlowController.pGain = 10;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	a0 e2       	ldi	r26, 0x20	; 32
 39c:	b1 e4       	ldi	r27, 0x41	; 65
 39e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_edata+0x14>
 3a2:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <_edata+0x15>
 3a6:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <_edata+0x16>
 3aa:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <_edata+0x17>
	FlowController.dGain = 10;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a0 e2       	ldi	r26, 0x20	; 32
 3b4:	b1 e4       	ldi	r27, 0x41	; 65
 3b6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <_edata+0x18>
 3ba:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <_edata+0x19>
 3be:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <_edata+0x1a>
 3c2:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <_edata+0x1b>
	FlowController.iMax = 100;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a8 ec       	ldi	r26, 0xC8	; 200
 3cc:	b2 e4       	ldi	r27, 0x42	; 66
 3ce:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_edata+0x8>
 3d2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_edata+0x9>
 3d6:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <_edata+0xa>
 3da:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <_edata+0xb>
	FlowController.iMin = 0;
 3de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_edata+0xc>
 3e2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_edata+0xd>
 3e6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <_edata+0xe>
 3ea:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <_edata+0xf>

	//Again but for the level controller
	LevelController.iGain = 10;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	a0 e2       	ldi	r26, 0x20	; 32
 3f4:	b1 e4       	ldi	r27, 0x41	; 65
 3f6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <LevelController+0x10>
 3fa:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <LevelController+0x11>
 3fe:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <LevelController+0x12>
 402:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <LevelController+0x13>
	LevelController.pGain = 10;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	a0 e2       	ldi	r26, 0x20	; 32
 40c:	b1 e4       	ldi	r27, 0x41	; 65
 40e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <LevelController+0x14>
 412:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <LevelController+0x15>
 416:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <LevelController+0x16>
 41a:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <LevelController+0x17>
	LevelController.dGain = 10;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a0 e2       	ldi	r26, 0x20	; 32
 424:	b1 e4       	ldi	r27, 0x41	; 65
 426:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <LevelController+0x18>
 42a:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <LevelController+0x19>
 42e:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <LevelController+0x1a>
 432:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <LevelController+0x1b>
	LevelController.iMax = 100;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a8 ec       	ldi	r26, 0xC8	; 200
 43c:	b2 e4       	ldi	r27, 0x42	; 66
 43e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <LevelController+0x8>
 442:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <LevelController+0x9>
 446:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <LevelController+0xa>
 44a:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <LevelController+0xb>
	LevelController.iMin = 0;
 44e:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <LevelController+0xc>
 452:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <LevelController+0xd>
 456:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <LevelController+0xe>
 45a:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <LevelController+0xf>

	sei(); //Enable interrupt
 45e:	78 94       	sei
}
 460:	00 00       	nop
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <InitialiseTimer1>:

void InitialiseTimer1() //Copied from TimerDemo3. Generates interrupt on a one second interval. This will be changed.
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
 470:	80 e8       	ldi	r24, 0x80	; 128
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	10 82       	st	Z, r1
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
 478:	81 e8       	ldi	r24, 0x81	; 129
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	2d e0       	ldi	r18, 0x0D	; 13
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
	TCCR1C = 0b00000000;
 482:	82 e8       	ldi	r24, 0x82	; 130
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	fc 01       	movw	r30, r24
 488:	10 82       	st	Z, r1
	
	// For 1 MHz clock (with 1024 prescaler) to achieve a 1 second interval:
	// Need to count 1 million clock cycles (but already divided by 1024)
	// So actually need to count to (1000000 / 1024 =) 976 decimal, = 3D0 Hex
	OCR1AH = 0x03; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
 48a:	89 e8       	ldi	r24, 0x89	; 137
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	23 e0       	ldi	r18, 0x03	; 3
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	OCR1AL = 0xD0;
 494:	88 e8       	ldi	r24, 0x88	; 136
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	20 ed       	ldi	r18, 0xD0	; 208
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18

	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
 49e:	85 e8       	ldi	r24, 0x85	; 133
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	10 82       	st	Z, r1
	TCNT1L = 0b00000000;
 4a6:	84 e8       	ldi	r24, 0x84	; 132
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	10 82       	st	Z, r1
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
 4ae:	8f e6       	ldi	r24, 0x6F	; 111
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	22 e0       	ldi	r18, 0x02	; 2
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	// when the timer reaches the set value (in the OCR1A register)
}
 4b8:	00 00       	nop
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <InitializeADC>:

void InitializeADC() //Copied from TwoPotentiometers. Serves as input for all analog inputs
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b01100010;	// AVCC REF, Left-adjust output (Read most-significant 8 bits via ADCH), Convert channel 2
 4c8:	8c e7       	ldi	r24, 0x7C	; 124
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	22 e6       	ldi	r18, 0x62	; 98
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	ADCSRA = 0b10101101;	// ADC enabled, Auto trigger, Interrupt enabled, Prescaler = 32
 4d2:	8a e7       	ldi	r24, 0x7A	; 122
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	2d ea       	ldi	r18, 0xAD	; 173
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
	ADCSRB &= 0b11110000;	// clear bits 3,2,1,0 (Free running mode)
 4dc:	8b e7       	ldi	r24, 0x7B	; 123
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	2b e7       	ldi	r18, 0x7B	; 123
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	20 7f       	andi	r18, 0xF0	; 240
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
	DIDR0 = 0b00001100;	// Disable digital input on bits 2 and 3
 4ee:	8e e7       	ldi	r24, 0x7E	; 126
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	2c e0       	ldi	r18, 0x0C	; 12
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
	DIDR2 = 0b11111111;	// Disable digital input on all bits (64-pin version of ATmega1281 does not even have these inputs)
 4f8:	8d e7       	ldi	r24, 0x7D	; 125
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
	ADCSRA |= 0b01000000;	// start ADC conversion
 502:	8a e7       	ldi	r24, 0x7A	; 122
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2a e7       	ldi	r18, 0x7A	; 122
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	20 64       	ori	r18, 0x40	; 64
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
}
 514:	00 00       	nop
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <__vector_29>:

ISR(ADC_vect) // ADC Interrupt Handler. This interrupt handler is common for all ADC channels
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 52c:	0f 92       	push	r0
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	1f 92       	push	r1
 54c:	1f 92       	push	r1
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
	// Need to alternate which channel is converted
	unsigned char ADMUX_temp = ADMUX;
 552:	8c e7       	ldi	r24, 0x7C	; 124
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	80 81       	ld	r24, Z
 55a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char ADCH_temp = ADCH;
 55c:	89 e7       	ldi	r24, 0x79	; 121
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	8a 83       	std	Y+2, r24	; 0x02
	
	ADMUX_temp &= 0b00011111;	// Mask off non-multiplexer bits
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	8f 71       	andi	r24, 0x1F	; 31
 56a:	89 83       	std	Y+1, r24	; 0x01
	if(0b00000010 == ADMUX_temp)
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	c9 f4       	brne	.+50     	; 0x5a4 <__vector_29+0x88>
	{
		LevelPosition = ADCH_temp;
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	a0 e0       	ldi	r26, 0x00	; 0
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	bc 01       	movw	r22, r24
 57e:	cd 01       	movw	r24, r26
 580:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__floatunsisf>
 584:	dc 01       	movw	r26, r24
 586:	cb 01       	movw	r24, r22
 588:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <LevelPosition>
 58c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <LevelPosition+0x1>
 590:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <LevelPosition+0x2>
 594:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <LevelPosition+0x3>
		ADMUX = 0b01100011;		// Set ADMUX ADC register - next conversion is for ADC3
 598:	8c e7       	ldi	r24, 0x7C	; 124
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	23 e6       	ldi	r18, 0x63	; 99
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
	}
	
	//Debug code
	//PORTA = FlowPosition;
	//PORTA = LevelPosition;
}
 5a2:	18 c0       	rjmp	.+48     	; 0x5d4 <__vector_29+0xb8>
		LevelPosition = ADCH_temp;
		ADMUX = 0b01100011;		// Set ADMUX ADC register - next conversion is for ADC3
	}
	else
	{
		FlowPosition = ADCH_temp;
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	a0 e0       	ldi	r26, 0x00	; 0
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	bc 01       	movw	r22, r24
 5b0:	cd 01       	movw	r24, r26
 5b2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__floatunsisf>
 5b6:	dc 01       	movw	r26, r24
 5b8:	cb 01       	movw	r24, r22
 5ba:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <FlowPosition>
 5be:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <FlowPosition+0x1>
 5c2:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <FlowPosition+0x2>
 5c6:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <FlowPosition+0x3>
		ADMUX = 0b01100010;		// Set ADMUX ADC register - next conversion is for ADC2
 5ca:	8c e7       	ldi	r24, 0x7C	; 124
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	22 e6       	ldi	r18, 0x62	; 98
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
	}
	
	//Debug code
	//PORTA = FlowPosition;
	//PORTA = LevelPosition;
}
 5d4:	00 00       	nop
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 5fc:	0f 90       	pop	r0
 5fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 618:	0f 92       	push	r0
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
	LevelError = LevelPosition - LevelSetpoint;
 63e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <LevelPosition>
 642:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <LevelPosition+0x1>
 646:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <LevelPosition+0x2>
 64a:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <LevelPosition+0x3>
 64e:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <LevelSetpoint>
 652:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <LevelSetpoint+0x1>
 656:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <LevelSetpoint+0x2>
 65a:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <LevelSetpoint+0x3>
 65e:	bc 01       	movw	r22, r24
 660:	cd 01       	movw	r24, r26
 662:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 666:	dc 01       	movw	r26, r24
 668:	cb 01       	movw	r24, r22
 66a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <LevelError>
 66e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <LevelError+0x1>
 672:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <LevelError+0x2>
 676:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <LevelError+0x3>
	FlowOutput = UpdatePID(&FlowController, FlowError, FlowPosition);
 67a:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <FlowPosition>
 67e:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <FlowPosition+0x1>
 682:	40 91 52 02 	lds	r20, 0x0252	; 0x800252 <FlowPosition+0x2>
 686:	50 91 53 02 	lds	r21, 0x0253	; 0x800253 <FlowPosition+0x3>
 68a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <FlowError>
 68e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <FlowError+0x1>
 692:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <FlowError+0x2>
 696:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <FlowError+0x3>
 69a:	89 01       	movw	r16, r18
 69c:	9a 01       	movw	r18, r20
 69e:	ac 01       	movw	r20, r24
 6a0:	bd 01       	movw	r22, r26
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	92 e0       	ldi	r25, 0x02	; 2
 6a6:	0e 94 88 00 	call	0x110	; 0x110 <UpdatePID>
 6aa:	dc 01       	movw	r26, r24
 6ac:	cb 01       	movw	r24, r22
 6ae:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <FlowOutput>
 6b2:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <FlowOutput+0x1>
 6b6:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <FlowOutput+0x2>
 6ba:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <FlowOutput+0x3>

	FlowError = FlowPosition - LevelOutput;
 6be:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <FlowPosition>
 6c2:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <FlowPosition+0x1>
 6c6:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <FlowPosition+0x2>
 6ca:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <FlowPosition+0x3>
 6ce:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <LevelOutput>
 6d2:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <LevelOutput+0x1>
 6d6:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <LevelOutput+0x2>
 6da:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <LevelOutput+0x3>
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 6e6:	dc 01       	movw	r26, r24
 6e8:	cb 01       	movw	r24, r22
 6ea:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <FlowError>
 6ee:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <FlowError+0x1>
 6f2:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <FlowError+0x2>
 6f6:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <FlowError+0x3>
	LevelOutput = UpdatePID(&LevelController, LevelError, LevelPosition);
 6fa:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <LevelPosition>
 6fe:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <LevelPosition+0x1>
 702:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <LevelPosition+0x2>
 706:	50 91 23 02 	lds	r21, 0x0223	; 0x800223 <LevelPosition+0x3>
 70a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <LevelError>
 70e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <LevelError+0x1>
 712:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <LevelError+0x2>
 716:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <LevelError+0x3>
 71a:	89 01       	movw	r16, r18
 71c:	9a 01       	movw	r18, r20
 71e:	ac 01       	movw	r20, r24
 720:	bd 01       	movw	r22, r26
 722:	84 e2       	ldi	r24, 0x24	; 36
 724:	92 e0       	ldi	r25, 0x02	; 2
 726:	0e 94 88 00 	call	0x110	; 0x110 <UpdatePID>
 72a:	dc 01       	movw	r26, r24
 72c:	cb 01       	movw	r24, r22
 72e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <LevelOutput>
 732:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <LevelOutput+0x1>
 736:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <LevelOutput+0x2>
 73a:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <LevelOutput+0x3>

	//Debug code
	PORTA = FlowOutput;
 73e:	02 e2       	ldi	r16, 0x22	; 34
 740:	10 e0       	ldi	r17, 0x00	; 0
 742:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <FlowOutput>
 746:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <FlowOutput+0x1>
 74a:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <FlowOutput+0x2>
 74e:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <FlowOutput+0x3>
 752:	bc 01       	movw	r22, r24
 754:	cd 01       	movw	r24, r26
 756:	0e 94 3d 04 	call	0x87a	; 0x87a <__fixunssfsi>
 75a:	dc 01       	movw	r26, r24
 75c:	cb 01       	movw	r24, r22
 75e:	f8 01       	movw	r30, r16
 760:	80 83       	st	Z, r24
	//PORTA = LevelOutput;
}
 762:	00 00       	nop
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	0f 90       	pop	r0
 786:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 78a:	0f 90       	pop	r0
 78c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__subsf3>:
 796:	50 58       	subi	r21, 0x80	; 128

00000798 <__addsf3>:
 798:	bb 27       	eor	r27, r27
 79a:	aa 27       	eor	r26, r26
 79c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3x>
 7a0:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__fp_round>
 7a4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscA>
 7a8:	38 f0       	brcs	.+14     	; 0x7b8 <__addsf3+0x20>
 7aa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_pscB>
 7ae:	20 f0       	brcs	.+8      	; 0x7b8 <__addsf3+0x20>
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <__addsf3+0x28>
 7b2:	9f 3f       	cpi	r25, 0xFF	; 255
 7b4:	19 f4       	brne	.+6      	; 0x7bc <__addsf3+0x24>
 7b6:	26 f4       	brtc	.+8      	; 0x7c0 <__addsf3+0x28>
 7b8:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_nan>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3+0x28>
 7be:	e0 95       	com	r30
 7c0:	e7 fb       	bst	r30, 7
 7c2:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>

000007c6 <__addsf3x>:
 7c6:	e9 2f       	mov	r30, r25
 7c8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_split3>
 7cc:	58 f3       	brcs	.-42     	; 0x7a4 <__addsf3+0xc>
 7ce:	ba 17       	cp	r27, r26
 7d0:	62 07       	cpc	r22, r18
 7d2:	73 07       	cpc	r23, r19
 7d4:	84 07       	cpc	r24, r20
 7d6:	95 07       	cpc	r25, r21
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__addsf3x+0x1c>
 7da:	79 f4       	brne	.+30     	; 0x7fa <__addsf3x+0x34>
 7dc:	a6 f5       	brtc	.+104    	; 0x846 <__addsf3x+0x80>
 7de:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_zero>
 7e2:	0e f4       	brtc	.+2      	; 0x7e6 <__addsf3x+0x20>
 7e4:	e0 95       	com	r30
 7e6:	0b 2e       	mov	r0, r27
 7e8:	ba 2f       	mov	r27, r26
 7ea:	a0 2d       	mov	r26, r0
 7ec:	0b 01       	movw	r0, r22
 7ee:	b9 01       	movw	r22, r18
 7f0:	90 01       	movw	r18, r0
 7f2:	0c 01       	movw	r0, r24
 7f4:	ca 01       	movw	r24, r20
 7f6:	a0 01       	movw	r20, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	ff 27       	eor	r31, r31
 7fc:	59 1b       	sub	r21, r25
 7fe:	99 f0       	breq	.+38     	; 0x826 <__addsf3x+0x60>
 800:	59 3f       	cpi	r21, 0xF9	; 249
 802:	50 f4       	brcc	.+20     	; 0x818 <__addsf3x+0x52>
 804:	50 3e       	cpi	r21, 0xE0	; 224
 806:	68 f1       	brcs	.+90     	; 0x862 <__addsf3x+0x9c>
 808:	1a 16       	cp	r1, r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	a2 2f       	mov	r26, r18
 80e:	23 2f       	mov	r18, r19
 810:	34 2f       	mov	r19, r20
 812:	44 27       	eor	r20, r20
 814:	58 5f       	subi	r21, 0xF8	; 248
 816:	f3 cf       	rjmp	.-26     	; 0x7fe <__addsf3x+0x38>
 818:	46 95       	lsr	r20
 81a:	37 95       	ror	r19
 81c:	27 95       	ror	r18
 81e:	a7 95       	ror	r26
 820:	f0 40       	sbci	r31, 0x00	; 0
 822:	53 95       	inc	r21
 824:	c9 f7       	brne	.-14     	; 0x818 <__addsf3x+0x52>
 826:	7e f4       	brtc	.+30     	; 0x846 <__addsf3x+0x80>
 828:	1f 16       	cp	r1, r31
 82a:	ba 0b       	sbc	r27, r26
 82c:	62 0b       	sbc	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	ba f0       	brmi	.+46     	; 0x862 <__addsf3x+0x9c>
 834:	91 50       	subi	r25, 0x01	; 1
 836:	a1 f0       	breq	.+40     	; 0x860 <__addsf3x+0x9a>
 838:	ff 0f       	add	r31, r31
 83a:	bb 1f       	adc	r27, r27
 83c:	66 1f       	adc	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	c2 f7       	brpl	.-16     	; 0x834 <__addsf3x+0x6e>
 844:	0e c0       	rjmp	.+28     	; 0x862 <__addsf3x+0x9c>
 846:	ba 0f       	add	r27, r26
 848:	62 1f       	adc	r22, r18
 84a:	73 1f       	adc	r23, r19
 84c:	84 1f       	adc	r24, r20
 84e:	48 f4       	brcc	.+18     	; 0x862 <__addsf3x+0x9c>
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	9e 3f       	cpi	r25, 0xFE	; 254
 85c:	08 f0       	brcs	.+2      	; 0x860 <__addsf3x+0x9a>
 85e:	b0 cf       	rjmp	.-160    	; 0x7c0 <__addsf3+0x28>
 860:	93 95       	inc	r25
 862:	88 0f       	add	r24, r24
 864:	08 f0       	brcs	.+2      	; 0x868 <__addsf3x+0xa2>
 866:	99 27       	eor	r25, r25
 868:	ee 0f       	add	r30, r30
 86a:	97 95       	ror	r25
 86c:	87 95       	ror	r24
 86e:	08 95       	ret

00000870 <__cmpsf2>:
 870:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_cmp>
 874:	08 f4       	brcc	.+2      	; 0x878 <__cmpsf2+0x8>
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 95       	ret

0000087a <__fixunssfsi>:
 87a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_splitA>
 87e:	88 f0       	brcs	.+34     	; 0x8a2 <__fixunssfsi+0x28>
 880:	9f 57       	subi	r25, 0x7F	; 127
 882:	98 f0       	brcs	.+38     	; 0x8aa <__fixunssfsi+0x30>
 884:	b9 2f       	mov	r27, r25
 886:	99 27       	eor	r25, r25
 888:	b7 51       	subi	r27, 0x17	; 23
 88a:	b0 f0       	brcs	.+44     	; 0x8b8 <__fixunssfsi+0x3e>
 88c:	e1 f0       	breq	.+56     	; 0x8c6 <__fixunssfsi+0x4c>
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	1a f0       	brmi	.+6      	; 0x89e <__fixunssfsi+0x24>
 898:	ba 95       	dec	r27
 89a:	c9 f7       	brne	.-14     	; 0x88e <__fixunssfsi+0x14>
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <__fixunssfsi+0x4c>
 89e:	b1 30       	cpi	r27, 0x01	; 1
 8a0:	91 f0       	breq	.+36     	; 0x8c6 <__fixunssfsi+0x4c>
 8a2:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_zero>
 8a6:	b1 e0       	ldi	r27, 0x01	; 1
 8a8:	08 95       	ret
 8aa:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_zero>
 8ae:	67 2f       	mov	r22, r23
 8b0:	78 2f       	mov	r23, r24
 8b2:	88 27       	eor	r24, r24
 8b4:	b8 5f       	subi	r27, 0xF8	; 248
 8b6:	39 f0       	breq	.+14     	; 0x8c6 <__fixunssfsi+0x4c>
 8b8:	b9 3f       	cpi	r27, 0xF9	; 249
 8ba:	cc f3       	brlt	.-14     	; 0x8ae <__fixunssfsi+0x34>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b3 95       	inc	r27
 8c4:	d9 f7       	brne	.-10     	; 0x8bc <__fixunssfsi+0x42>
 8c6:	3e f4       	brtc	.+14     	; 0x8d6 <__fixunssfsi+0x5c>
 8c8:	90 95       	com	r25
 8ca:	80 95       	com	r24
 8cc:	70 95       	com	r23
 8ce:	61 95       	neg	r22
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	08 95       	ret

000008d8 <__floatunsisf>:
 8d8:	e8 94       	clt
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <__floatsisf+0x12>

000008dc <__floatsisf>:
 8dc:	97 fb       	bst	r25, 7
 8de:	3e f4       	brtc	.+14     	; 0x8ee <__floatsisf+0x12>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	99 23       	and	r25, r25
 8f0:	a9 f0       	breq	.+42     	; 0x91c <__floatsisf+0x40>
 8f2:	f9 2f       	mov	r31, r25
 8f4:	96 e9       	ldi	r25, 0x96	; 150
 8f6:	bb 27       	eor	r27, r27
 8f8:	93 95       	inc	r25
 8fa:	f6 95       	lsr	r31
 8fc:	87 95       	ror	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f1 11       	cpse	r31, r1
 906:	f8 cf       	rjmp	.-16     	; 0x8f8 <__floatsisf+0x1c>
 908:	fa f4       	brpl	.+62     	; 0x948 <__floatsisf+0x6c>
 90a:	bb 0f       	add	r27, r27
 90c:	11 f4       	brne	.+4      	; 0x912 <__floatsisf+0x36>
 90e:	60 ff       	sbrs	r22, 0
 910:	1b c0       	rjmp	.+54     	; 0x948 <__floatsisf+0x6c>
 912:	6f 5f       	subi	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	16 c0       	rjmp	.+44     	; 0x948 <__floatsisf+0x6c>
 91c:	88 23       	and	r24, r24
 91e:	11 f0       	breq	.+4      	; 0x924 <__floatsisf+0x48>
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	11 c0       	rjmp	.+34     	; 0x946 <__floatsisf+0x6a>
 924:	77 23       	and	r23, r23
 926:	21 f0       	breq	.+8      	; 0x930 <__floatsisf+0x54>
 928:	9e e8       	ldi	r25, 0x8E	; 142
 92a:	87 2f       	mov	r24, r23
 92c:	76 2f       	mov	r23, r22
 92e:	05 c0       	rjmp	.+10     	; 0x93a <__floatsisf+0x5e>
 930:	66 23       	and	r22, r22
 932:	71 f0       	breq	.+28     	; 0x950 <__floatsisf+0x74>
 934:	96 e8       	ldi	r25, 0x86	; 134
 936:	86 2f       	mov	r24, r22
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	2a f0       	brmi	.+10     	; 0x948 <__floatsisf+0x6c>
 93e:	9a 95       	dec	r25
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	da f7       	brpl	.-10     	; 0x93e <__floatsisf+0x62>
 948:	88 0f       	add	r24, r24
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <__fp_cmp>:
 952:	99 0f       	add	r25, r25
 954:	00 08       	sbc	r0, r0
 956:	55 0f       	add	r21, r21
 958:	aa 0b       	sbc	r26, r26
 95a:	e0 e8       	ldi	r30, 0x80	; 128
 95c:	fe ef       	ldi	r31, 0xFE	; 254
 95e:	16 16       	cp	r1, r22
 960:	17 06       	cpc	r1, r23
 962:	e8 07       	cpc	r30, r24
 964:	f9 07       	cpc	r31, r25
 966:	c0 f0       	brcs	.+48     	; 0x998 <__fp_cmp+0x46>
 968:	12 16       	cp	r1, r18
 96a:	13 06       	cpc	r1, r19
 96c:	e4 07       	cpc	r30, r20
 96e:	f5 07       	cpc	r31, r21
 970:	98 f0       	brcs	.+38     	; 0x998 <__fp_cmp+0x46>
 972:	62 1b       	sub	r22, r18
 974:	73 0b       	sbc	r23, r19
 976:	84 0b       	sbc	r24, r20
 978:	95 0b       	sbc	r25, r21
 97a:	39 f4       	brne	.+14     	; 0x98a <__fp_cmp+0x38>
 97c:	0a 26       	eor	r0, r26
 97e:	61 f0       	breq	.+24     	; 0x998 <__fp_cmp+0x46>
 980:	23 2b       	or	r18, r19
 982:	24 2b       	or	r18, r20
 984:	25 2b       	or	r18, r21
 986:	21 f4       	brne	.+8      	; 0x990 <__fp_cmp+0x3e>
 988:	08 95       	ret
 98a:	0a 26       	eor	r0, r26
 98c:	09 f4       	brne	.+2      	; 0x990 <__fp_cmp+0x3e>
 98e:	a1 40       	sbci	r26, 0x01	; 1
 990:	a6 95       	lsr	r26
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	81 1d       	adc	r24, r1
 996:	81 1d       	adc	r24, r1
 998:	08 95       	ret

0000099a <__fp_inf>:
 99a:	97 f9       	bld	r25, 7
 99c:	9f 67       	ori	r25, 0x7F	; 127
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <__fp_nan>:
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	08 95       	ret

000009ac <__fp_pscA>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	09 06       	cpc	r0, r25
 9b8:	08 95       	ret

000009ba <__fp_pscB>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	05 06       	cpc	r0, r21
 9c6:	08 95       	ret

000009c8 <__fp_round>:
 9c8:	09 2e       	mov	r0, r25
 9ca:	03 94       	inc	r0
 9cc:	00 0c       	add	r0, r0
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0xc>
 9d0:	88 23       	and	r24, r24
 9d2:	52 f0       	brmi	.+20     	; 0x9e8 <__fp_round+0x20>
 9d4:	bb 0f       	add	r27, r27
 9d6:	40 f4       	brcc	.+16     	; 0x9e8 <__fp_round+0x20>
 9d8:	bf 2b       	or	r27, r31
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0x18>
 9dc:	60 ff       	sbrs	r22, 0
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__fp_round+0x20>
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__fp_split3>:
 9ea:	57 fd       	sbrc	r21, 7
 9ec:	90 58       	subi	r25, 0x80	; 128
 9ee:	44 0f       	add	r20, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	59 f0       	breq	.+22     	; 0xa0a <__fp_splitA+0x10>
 9f4:	5f 3f       	cpi	r21, 0xFF	; 255
 9f6:	71 f0       	breq	.+28     	; 0xa14 <__fp_splitA+0x1a>
 9f8:	47 95       	ror	r20

000009fa <__fp_splitA>:
 9fa:	88 0f       	add	r24, r24
 9fc:	97 fb       	bst	r25, 7
 9fe:	99 1f       	adc	r25, r25
 a00:	61 f0       	breq	.+24     	; 0xa1a <__fp_splitA+0x20>
 a02:	9f 3f       	cpi	r25, 0xFF	; 255
 a04:	79 f0       	breq	.+30     	; 0xa24 <__fp_splitA+0x2a>
 a06:	87 95       	ror	r24
 a08:	08 95       	ret
 a0a:	12 16       	cp	r1, r18
 a0c:	13 06       	cpc	r1, r19
 a0e:	14 06       	cpc	r1, r20
 a10:	55 1f       	adc	r21, r21
 a12:	f2 cf       	rjmp	.-28     	; 0x9f8 <__fp_split3+0xe>
 a14:	46 95       	lsr	r20
 a16:	f1 df       	rcall	.-30     	; 0x9fa <__fp_splitA>
 a18:	08 c0       	rjmp	.+16     	; 0xa2a <__fp_splitA+0x30>
 a1a:	16 16       	cp	r1, r22
 a1c:	17 06       	cpc	r1, r23
 a1e:	18 06       	cpc	r1, r24
 a20:	99 1f       	adc	r25, r25
 a22:	f1 cf       	rjmp	.-30     	; 0xa06 <__fp_splitA+0xc>
 a24:	86 95       	lsr	r24
 a26:	71 05       	cpc	r23, r1
 a28:	61 05       	cpc	r22, r1
 a2a:	08 94       	sec
 a2c:	08 95       	ret

00000a2e <__fp_zero>:
 a2e:	e8 94       	clt

00000a30 <__fp_szero>:
 a30:	bb 27       	eor	r27, r27
 a32:	66 27       	eor	r22, r22
 a34:	77 27       	eor	r23, r23
 a36:	cb 01       	movw	r24, r22
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__gesf2>:
 a3c:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_cmp>
 a40:	08 f4       	brcc	.+2      	; 0xa44 <__gesf2+0x8>
 a42:	8f ef       	ldi	r24, 0xFF	; 255
 a44:	08 95       	ret

00000a46 <__mulsf3>:
 a46:	0e 94 36 05 	call	0xa6c	; 0xa6c <__mulsf3x>
 a4a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__fp_round>
 a4e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscA>
 a52:	38 f0       	brcs	.+14     	; 0xa62 <__mulsf3+0x1c>
 a54:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_pscB>
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__mulsf3+0x1c>
 a5a:	95 23       	and	r25, r21
 a5c:	11 f0       	breq	.+4      	; 0xa62 <__mulsf3+0x1c>
 a5e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>
 a62:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_nan>
 a66:	11 24       	eor	r1, r1
 a68:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_szero>

00000a6c <__mulsf3x>:
 a6c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_split3>
 a70:	70 f3       	brcs	.-36     	; 0xa4e <__mulsf3+0x8>

00000a72 <__mulsf3_pse>:
 a72:	95 9f       	mul	r25, r21
 a74:	c1 f3       	breq	.-16     	; 0xa66 <__mulsf3+0x20>
 a76:	95 0f       	add	r25, r21
 a78:	50 e0       	ldi	r21, 0x00	; 0
 a7a:	55 1f       	adc	r21, r21
 a7c:	62 9f       	mul	r22, r18
 a7e:	f0 01       	movw	r30, r0
 a80:	72 9f       	mul	r23, r18
 a82:	bb 27       	eor	r27, r27
 a84:	f0 0d       	add	r31, r0
 a86:	b1 1d       	adc	r27, r1
 a88:	63 9f       	mul	r22, r19
 a8a:	aa 27       	eor	r26, r26
 a8c:	f0 0d       	add	r31, r0
 a8e:	b1 1d       	adc	r27, r1
 a90:	aa 1f       	adc	r26, r26
 a92:	64 9f       	mul	r22, r20
 a94:	66 27       	eor	r22, r22
 a96:	b0 0d       	add	r27, r0
 a98:	a1 1d       	adc	r26, r1
 a9a:	66 1f       	adc	r22, r22
 a9c:	82 9f       	mul	r24, r18
 a9e:	22 27       	eor	r18, r18
 aa0:	b0 0d       	add	r27, r0
 aa2:	a1 1d       	adc	r26, r1
 aa4:	62 1f       	adc	r22, r18
 aa6:	73 9f       	mul	r23, r19
 aa8:	b0 0d       	add	r27, r0
 aaa:	a1 1d       	adc	r26, r1
 aac:	62 1f       	adc	r22, r18
 aae:	83 9f       	mul	r24, r19
 ab0:	a0 0d       	add	r26, r0
 ab2:	61 1d       	adc	r22, r1
 ab4:	22 1f       	adc	r18, r18
 ab6:	74 9f       	mul	r23, r20
 ab8:	33 27       	eor	r19, r19
 aba:	a0 0d       	add	r26, r0
 abc:	61 1d       	adc	r22, r1
 abe:	23 1f       	adc	r18, r19
 ac0:	84 9f       	mul	r24, r20
 ac2:	60 0d       	add	r22, r0
 ac4:	21 1d       	adc	r18, r1
 ac6:	82 2f       	mov	r24, r18
 ac8:	76 2f       	mov	r23, r22
 aca:	6a 2f       	mov	r22, r26
 acc:	11 24       	eor	r1, r1
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	50 40       	sbci	r21, 0x00	; 0
 ad2:	9a f0       	brmi	.+38     	; 0xafa <__mulsf3_pse+0x88>
 ad4:	f1 f0       	breq	.+60     	; 0xb12 <__mulsf3_pse+0xa0>
 ad6:	88 23       	and	r24, r24
 ad8:	4a f0       	brmi	.+18     	; 0xaec <__mulsf3_pse+0x7a>
 ada:	ee 0f       	add	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	bb 1f       	adc	r27, r27
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	50 40       	sbci	r21, 0x00	; 0
 aea:	a9 f7       	brne	.-22     	; 0xad6 <__mulsf3_pse+0x64>
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	51 05       	cpc	r21, r1
 af0:	80 f0       	brcs	.+32     	; 0xb12 <__mulsf3_pse+0xa0>
 af2:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>
 af6:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_szero>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	e4 f3       	brlt	.-8      	; 0xaf6 <__mulsf3_pse+0x84>
 afe:	98 3e       	cpi	r25, 0xE8	; 232
 b00:	d4 f3       	brlt	.-12     	; 0xaf6 <__mulsf3_pse+0x84>
 b02:	86 95       	lsr	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	b7 95       	ror	r27
 b0a:	f7 95       	ror	r31
 b0c:	e7 95       	ror	r30
 b0e:	9f 5f       	subi	r25, 0xFF	; 255
 b10:	c1 f7       	brne	.-16     	; 0xb02 <__mulsf3_pse+0x90>
 b12:	fe 2b       	or	r31, r30
 b14:	88 0f       	add	r24, r24
 b16:	91 1d       	adc	r25, r1
 b18:	96 95       	lsr	r25
 b1a:	87 95       	ror	r24
 b1c:	97 f9       	bld	r25, 7
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
